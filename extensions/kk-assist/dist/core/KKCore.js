"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const KKUtils_1 = __importDefault(require("./KKUtils"));
const os_1 = require("os");
class KKCore {
    static doInitProj(pfx) {
        let fwPath = (0, path_1.join)(Editor.Project.path, "assets", "framework");
        if ((0, fs_extra_1.existsSync)(fwPath)) {
            Editor.Dialog.warn("The project has been initialized!", {
                buttons: ["OK"]
            });
        }
        else {
            // todo
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    static getBundles() {
        let bundles = [];
        let assetPath = (0, path_1.join)(Editor.Project.path, "assets");
        (0, fs_extra_1.readdirSync)(assetPath).map(itemName => {
            var _a;
            let abPath = (0, path_1.join)(assetPath, itemName);
            if ((0, fs_extra_1.statSync)(abPath).isDirectory() && itemName != "resources") {
                let meta = (0, fs_extra_1.readJsonSync)(abPath + ".meta");
                if ((_a = meta.userData) === null || _a === void 0 ? void 0 : _a.isBundle) {
                    bundles.push(itemName);
                }
            }
        });
        return bundles;
    }
    static async doCreateBundle(bundleName, priority) {
        let bundlePathUrl = "db://assets/" + bundleName;
        let bundlePath = await KKUtils_1.default.url2pathAsy(bundlePathUrl);
        if ((0, fs_extra_1.existsSync)(bundlePath)) {
            Editor.Dialog.warn(bundleName + " already exists", {
                buttons: ["OK"]
            });
            return false;
        }
        else {
            (0, fs_extra_1.mkdirSync)(bundlePath);
            await KKUtils_1.default.refreshResAsy(bundlePathUrl);
            let metaPath = bundlePath + '.meta';
            if ((0, fs_extra_1.existsSync)(metaPath)) {
                let meta = (0, fs_extra_1.readJsonSync)(metaPath);
                meta.userData.isBundle = true;
                meta.userData.priority = priority;
                (0, fs_extra_1.outputJsonSync)(metaPath, meta);
                await KKUtils_1.default.refreshResAsy(bundlePathUrl);
                (0, fs_extra_1.mkdirSync)((0, path_1.join)(bundlePath, "Prefabs"));
                (0, fs_extra_1.mkdirSync)((0, path_1.join)(bundlePath, "Scripts"));
                (0, fs_extra_1.mkdirSync)((0, path_1.join)(bundlePath, "Textures"));
                await KKUtils_1.default.refreshResAsy(bundlePathUrl);
                console.log(bundleName + " created!");
                return true;
            }
            else {
                console.error('Can not find meta file!');
                return false;
            }
        }
    }
    static doCreateLayer(layerName, bundleName) {
        KKCore.genUIUnit("Layer", layerName, bundleName);
    }
    static doCreatePopup(popupName, bundleName) {
        KKCore.genUIUnit("Popup", popupName, bundleName);
    }
    static doCreatePanel(panelName, bundleName) {
        KKCore.genUIUnit("Panel", panelName, bundleName);
    }
    static doCreateWidget(widgetName, bundleName) {
        KKCore.genUIUnit("Widget", widgetName, bundleName);
    }
    static async genUIUnit(typeName, uiName, bundleName) {
        let bundleUrl = "db://assets/" + bundleName;
        let typeDirUrl = `${bundleUrl}/Prefabs/${typeName}`;
        let typeDirPath = await KKUtils_1.default.url2pathAsy(typeDirUrl);
        if (!(0, fs_extra_1.existsSync)(typeDirPath)) {
            (0, fs_extra_1.mkdirSync)(typeDirPath);
            await KKUtils_1.default.refreshResAsy(typeDirUrl);
        }
        let prefabUrl = `${typeDirUrl}/${uiName}.prefab`;
        let prefabPath = await KKUtils_1.default.url2pathAsy(prefabUrl);
        if ((0, fs_extra_1.existsSync)(prefabPath)) {
            Editor.Dialog.warn(uiName + " already exists", {
                buttons: ["OK"]
            });
        }
        else {
            let tsUrl = bundleUrl + "/Scripts/" + uiName + ".ts";
            let tsPath = await KKUtils_1.default.url2pathAsy(tsUrl);
            (0, fs_extra_1.copyFileSync)((0, path_1.join)(KKUtils_1.default.getPluginPath(), "template", `Template${typeName}.ts`), tsPath);
            (0, fs_extra_1.copyFileSync)((0, path_1.join)(KKUtils_1.default.getPluginPath(), "template", "TemplatePfb.prefab"), prefabPath);
            let tsStr = (0, fs_extra_1.readFileSync)(tsPath).toString();
            tsStr = tsStr.replace("@author", "@author " + (0, os_1.hostname)());
            tsStr = tsStr.replace("@created", "@created " + (new Date()).toLocaleString());
            (0, fs_extra_1.writeFileSync)(tsPath, tsStr.replace(new RegExp("NewClass", 'g'), uiName));
            await KKUtils_1.default.refreshResAsy(tsUrl);
            let tsUUID = await KKUtils_1.default.url2uuidAsy(tsUrl);
            let compressUuid = Editor.Utils.UUID.compressUUID(tsUUID, false);
            let prefabStr = (0, fs_extra_1.readJsonSync)(prefabPath);
            prefabStr[0]._name = uiName;
            prefabStr[1]._name = uiName;
            prefabStr[6].__type__ = compressUuid;
            prefabStr.forEach((one, i) => {
                if (one.fileId) {
                    one.fileId = Editor.Utils.UUID.generate(true);
                }
            });
            (0, fs_extra_1.outputJsonSync)(prefabPath, prefabStr);
            await KKUtils_1.default.refreshResAsy(prefabUrl);
            console.log(`${uiName} created!`);
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    static getCodeCount() {
        let codeInfo = {
            code: 0, //有效行数
            space: 0, //空行数
            comment: 0, //注释行数
            total: 0, //总行数
        };
        let checkDir = (dirPath) => {
            let files = (0, fs_extra_1.readdirSync)(dirPath);
            files.forEach((fileName) => {
                let subPath = (0, path_1.join)(dirPath, fileName);
                let stat = (0, fs_extra_1.statSync)(subPath);
                if (stat.isDirectory()) {
                    checkDir(subPath);
                }
                else if (stat.isFile() && (0, path_1.extname)(fileName) == ".ts") {
                    let content = (0, fs_extra_1.readFileSync)(subPath, 'utf-8');
                    let lines = content.split('\n');
                    let inMultilineComment = false;
                    lines.forEach((line) => {
                        let trimLine = line.trim();
                        if (trimLine === "") {
                            codeInfo.space += 1;
                        }
                        else if (trimLine.startsWith("//")) {
                            codeInfo.comment += 1;
                        }
                        else if (trimLine.startsWith("/*")) {
                            codeInfo.comment += 1;
                            inMultilineComment = true;
                        }
                        else if (trimLine.endsWith("*/")) {
                            codeInfo.comment += 1;
                            inMultilineComment = false;
                        }
                        else if (inMultilineComment) {
                            codeInfo.comment += 1;
                        }
                        else {
                            codeInfo.code += 1;
                        }
                    });
                }
            });
        };
        checkDir((0, path_1.join)(Editor.Project.path, "assets"));
        codeInfo.total = codeInfo.code + codeInfo.space + codeInfo.comment;
        return codeInfo;
    }
    static getResCount() {
        let extInfo = {};
        let checkDir = (dirPath) => {
            let files = (0, fs_extra_1.readdirSync)(dirPath);
            files.forEach((fileName) => {
                let subPath = (0, path_1.join)(dirPath, fileName);
                let stat = (0, fs_extra_1.statSync)(subPath);
                if (stat.isDirectory()) {
                    checkDir(subPath);
                }
                else if (stat.isFile()) {
                    let ext = (0, path_1.extname)(fileName);
                    if (!ext)
                        ext = "unknown";
                    if (extInfo[ext]) {
                        extInfo[ext].num += 1;
                        extInfo[ext].size += stat.size;
                    }
                    else {
                        extInfo[ext] = {
                            num: 1,
                            size: stat.size
                        };
                    }
                }
            });
        };
        checkDir((0, path_1.join)(Editor.Project.path, "assets"));
        return extInfo;
    }
}
exports.default = KKCore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS0tDb3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc291cmNlL2NvcmUvS0tDb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsdUNBQWlKO0FBQ2pKLCtCQUFxQztBQUNyQyx3REFBZ0M7QUFFaEMsMkJBQThCO0FBRTlCLE1BQXFCLE1BQU07SUFFdkIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFXO1FBQ3pCLElBQUksTUFBTSxHQUFHLElBQUEsV0FBSSxFQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM5RCxJQUFJLElBQUEscUJBQVUsRUFBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxFQUFFO2dCQUNwRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUM7YUFDbEIsQ0FBQyxDQUFDO1FBQ1AsQ0FBQzthQUFNLENBQUM7WUFDSixPQUFPO1FBQ1gsQ0FBQztJQUNMLENBQUM7SUFFRCw2RkFBNkY7SUFFN0YsTUFBTSxDQUFDLFVBQVU7UUFDYixJQUFJLE9BQU8sR0FBYSxFQUFFLENBQUM7UUFDM0IsSUFBSSxTQUFTLEdBQUcsSUFBQSxXQUFJLEVBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDcEQsSUFBQSxzQkFBVyxFQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTs7WUFDbEMsSUFBSSxNQUFNLEdBQUcsSUFBQSxXQUFJLEVBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksSUFBQSxtQkFBUSxFQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxJQUFJLFFBQVEsSUFBSSxXQUFXLEVBQUUsQ0FBQztnQkFDNUQsSUFBSSxJQUFJLEdBQUcsSUFBQSx1QkFBWSxFQUFDLE1BQU0sR0FBRyxP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QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUM7b0JBQ25DLENBQUM7eUJBQU0sQ0FBQzt3QkFDSixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUc7NEJBQ1gsR0FBRyxFQUFFLENBQUM7NEJBQ04sSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO3lCQUNsQixDQUFDO29CQUNOLENBQUM7Z0JBQ0wsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDO1FBRUYsUUFBUSxDQUFDLElBQUEsV0FBSSxFQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFOUMsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztDQUVKO0FBbE5ELHlCQWtOQyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBjb3B5RmlsZVN5bmMsIGV4aXN0c1N5bmMsIG1rZGlyU3luYywgb3V0cHV0SnNvblN5bmMsIHJlYWRGaWxlU3luYywgcmVhZEpzb25TeW5jLCByZWFkZGlyU3luYywgc3RhdFN5bmMsIHdyaXRlRmlsZVN5bmMgfSBmcm9tIFwiZnMtZXh0cmFcIjtcclxuaW1wb3J0IHsgZXh0bmFtZSwgam9pbiB9IGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCBLS1V0aWxzIGZyb20gXCIuL0tLVXRpbHNcIjtcclxuaW1wb3J0IHBhY2thZ2VKU09OIGZyb20gJy4uLy4uL3BhY2thZ2UuanNvbic7XHJcbmltcG9ydCB7IGhvc3RuYW1lIH0gZnJvbSBcIm9zXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLS0NvcmUge1xyXG5cclxuICAgIHN0YXRpYyBkb0luaXRQcm9qKHBmeDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGZ3UGF0aCA9IGpvaW4oRWRpdG9yLlByb2plY3QucGF0aCwgXCJhc3NldHNcIiwgXCJmcmFtZXdvcmtcIik7XHJcbiAgICAgICAgaWYgKGV4aXN0c1N5bmMoZndQYXRoKSkge1xyXG4gICAgICAgICAgICBFZGl0b3IuRGlhbG9nLndhcm4oXCJUaGUgcHJvamVjdCBoYXMgYmVlbiBpbml0aWFsaXplZCFcIiwge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uczogW1wiT0tcIl1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdG9kb1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICBzdGF0aWMgZ2V0QnVuZGxlcygpIHtcclxuICAgICAgICBsZXQgYnVuZGxlczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICBsZXQgYXNzZXRQYXRoID0gam9pbihFZGl0b3IuUHJvamVjdC5wYXRoLCBcImFzc2V0c1wiKTtcclxuICAgICAgICByZWFkZGlyU3luYyhhc3NldFBhdGgpLm1hcChpdGVtTmFtZSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBhYlBhdGggPSBqb2luKGFzc2V0UGF0aCwgaXRlbU5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoc3RhdFN5bmMoYWJQYXRoKS5pc0RpcmVjdG9yeSgpICYmIGl0ZW1OYW1lICE9IFwicmVzb3VyY2VzXCIpIHtcclxuICAgICAgICAgICAgICAgIGxldCBtZXRhID0gcmVhZEpzb25TeW5jKGFiUGF0aCArIFwiLm1ldGFcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAobWV0YS51c2VyRGF0YT8uaXNCdW5kbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBidW5kbGVzLnB1c2goaXRlbU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGJ1bmRsZXM7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIGRvQ3JlYXRlQnVuZGxlKGJ1bmRsZU5hbWU6IHN0cmluZywgcHJpb3JpdHk6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBidW5kbGVQYXRoVXJsID0gXCJkYjovL2Fzc2V0cy9cIiArIGJ1bmRsZU5hbWU7XHJcbiAgICAgICAgbGV0IGJ1bmRsZVBhdGggPSBhd2FpdCBLS1V0aWxzLnVybDJwYXRoQXN5KGJ1bmRsZVBhdGhVcmwpO1xyXG5cclxuICAgICAgICBpZiAoZXhpc3RzU3luYyhidW5kbGVQYXRoKSkge1xyXG4gICAgICAgICAgICBFZGl0b3IuRGlhbG9nLndhcm4oYnVuZGxlTmFtZSArIFwiIGFscmVhZHkgZXhpc3RzXCIsIHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnM6IFtcIk9LXCJdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbWtkaXJTeW5jKGJ1bmRsZVBhdGgpO1xyXG4gICAgICAgICAgICBhd2FpdCBLS1V0aWxzLnJlZnJlc2hSZXNBc3koYnVuZGxlUGF0aFVybCk7XHJcbiAgICBcclxuICAgICAgICAgICAgbGV0IG1ldGFQYXRoID0gYnVuZGxlUGF0aCArICcubWV0YSc7XHJcbiAgICAgICAgICAgIGlmIChleGlzdHNTeW5jKG1ldGFQYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1ldGEgPSByZWFkSnNvblN5bmMobWV0YVBhdGgpO1xyXG4gICAgICAgICAgICAgICAgbWV0YS51c2VyRGF0YS5pc0J1bmRsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBtZXRhLnVzZXJEYXRhLnByaW9yaXR5ID0gcHJpb3JpdHk7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXRKc29uU3luYyhtZXRhUGF0aCwgbWV0YSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBLS1V0aWxzLnJlZnJlc2hSZXNBc3koYnVuZGxlUGF0aFVybCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbWtkaXJTeW5jKGpvaW4oYnVuZGxlUGF0aCwgXCJQcmVmYWJzXCIpKTtcclxuICAgICAgICAgICAgICAgIG1rZGlyU3luYyhqb2luKGJ1bmRsZVBhdGgsIFwiU2NyaXB0c1wiKSk7XHJcbiAgICAgICAgICAgICAgICBta2RpclN5bmMoam9pbihidW5kbGVQYXRoLCBcIlRleHR1cmVzXCIpKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IEtLVXRpbHMucmVmcmVzaFJlc0FzeShidW5kbGVQYXRoVXJsKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGJ1bmRsZU5hbWUgKyBcIiBjcmVhdGVkIVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignQ2FuIG5vdCBmaW5kIG1ldGEgZmlsZSEnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZG9DcmVhdGVMYXllcihsYXllck5hbWU6IHN0cmluZywgYnVuZGxlTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgS0tDb3JlLmdlblVJVW5pdChcIkxheWVyXCIsIGxheWVyTmFtZSwgYnVuZGxlTmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGRvQ3JlYXRlUG9wdXAocG9wdXBOYW1lOiBzdHJpbmcsIGJ1bmRsZU5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIEtLQ29yZS5nZW5VSVVuaXQoXCJQb3B1cFwiLCBwb3B1cE5hbWUsIGJ1bmRsZU5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBkb0NyZWF0ZVBhbmVsKHBhbmVsTmFtZTogc3RyaW5nLCBidW5kbGVOYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBLS0NvcmUuZ2VuVUlVbml0KFwiUGFuZWxcIiwgcGFuZWxOYW1lLCBidW5kbGVOYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZG9DcmVhdGVXaWRnZXQod2lkZ2V0TmFtZTogc3RyaW5nLCBidW5kbGVOYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBLS0NvcmUuZ2VuVUlVbml0KFwiV2lkZ2V0XCIsIHdpZGdldE5hbWUsIGJ1bmRsZU5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBnZW5VSVVuaXQodHlwZU5hbWU6IHN0cmluZywgdWlOYW1lOiBzdHJpbmcsIGJ1bmRsZU5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBidW5kbGVVcmwgPSBcImRiOi8vYXNzZXRzL1wiICsgYnVuZGxlTmFtZTtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgdHlwZURpclVybCA9IGAke2J1bmRsZVVybH0vUHJlZmFicy8ke3R5cGVOYW1lfWA7XHJcbiAgICAgICAgbGV0IHR5cGVEaXJQYXRoID0gYXdhaXQgS0tVdGlscy51cmwycGF0aEFzeSh0eXBlRGlyVXJsKTtcclxuICAgICAgICBpZiAoIWV4aXN0c1N5bmModHlwZURpclBhdGgpKSB7XHJcbiAgICAgICAgICAgIG1rZGlyU3luYyh0eXBlRGlyUGF0aCk7XHJcbiAgICAgICAgICAgIGF3YWl0IEtLVXRpbHMucmVmcmVzaFJlc0FzeSh0eXBlRGlyVXJsKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBsZXQgcHJlZmFiVXJsID0gYCR7dHlwZURpclVybH0vJHt1aU5hbWV9LnByZWZhYmA7XHJcbiAgICAgICAgbGV0IHByZWZhYlBhdGggPSBhd2FpdCBLS1V0aWxzLnVybDJwYXRoQXN5KHByZWZhYlVybCk7XHJcbiAgICAgICAgaWYgKGV4aXN0c1N5bmMocHJlZmFiUGF0aCkpIHtcclxuICAgICAgICAgICAgRWRpdG9yLkRpYWxvZy53YXJuKHVpTmFtZSArIFwiIGFscmVhZHkgZXhpc3RzXCIsIHtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnM6IFtcIk9LXCJdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB0c1VybCA9IGJ1bmRsZVVybCArIFwiL1NjcmlwdHMvXCIgKyB1aU5hbWUgKyBcIi50c1wiO1xyXG4gICAgICAgICAgICBsZXQgdHNQYXRoID0gYXdhaXQgS0tVdGlscy51cmwycGF0aEFzeSh0c1VybCk7XHJcbiAgICAgICAgICAgIGNvcHlGaWxlU3luYyhqb2luKEtLVXRpbHMuZ2V0UGx1Z2luUGF0aCgpLCBcInRlbXBsYXRlXCIsIGBUZW1wbGF0ZSR7dHlwZU5hbWV9LnRzYCksIHRzUGF0aCk7XHJcbiAgICAgICAgICAgIGNvcHlGaWxlU3luYyhqb2luKEtLVXRpbHMuZ2V0UGx1Z2luUGF0aCgpLCBcInRlbXBsYXRlXCIsIFwiVGVtcGxhdGVQZmIucHJlZmFiXCIpLCBwcmVmYWJQYXRoKTtcclxuICAgIFxyXG4gICAgICAgICAgICBsZXQgdHNTdHIgPSByZWFkRmlsZVN5bmModHNQYXRoKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB0c1N0ciA9IHRzU3RyLnJlcGxhY2UoXCJAYXV0aG9yXCIsIFwiQGF1dGhvciBcIiArIGhvc3RuYW1lKCkpO1xyXG4gICAgICAgICAgICB0c1N0ciA9IHRzU3RyLnJlcGxhY2UoXCJAY3JlYXRlZFwiLCBcIkBjcmVhdGVkIFwiICsgKG5ldyBEYXRlKCkpLnRvTG9jYWxlU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICB3cml0ZUZpbGVTeW5jKHRzUGF0aCwgdHNTdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiTmV3Q2xhc3NcIiwgJ2cnKSwgdWlOYW1lKSk7XHJcbiAgICBcclxuICAgICAgICAgICAgYXdhaXQgS0tVdGlscy5yZWZyZXNoUmVzQXN5KHRzVXJsKTtcclxuXHJcbiAgICAgICAgICAgIGxldCB0c1VVSUQgPSBhd2FpdCBLS1V0aWxzLnVybDJ1dWlkQXN5KHRzVXJsKTtcclxuICAgICAgICAgICAgbGV0IGNvbXByZXNzVXVpZCA9IEVkaXRvci5VdGlscy5VVUlELmNvbXByZXNzVVVJRCh0c1VVSUQsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBwcmVmYWJTdHIgPSByZWFkSnNvblN5bmMocHJlZmFiUGF0aCk7XHJcbiAgICAgICAgICAgIHByZWZhYlN0clswXS5fbmFtZSA9IHVpTmFtZTtcclxuICAgICAgICAgICAgcHJlZmFiU3RyWzFdLl9uYW1lID0gdWlOYW1lO1xyXG4gICAgICAgICAgICBwcmVmYWJTdHJbNl0uX190eXBlX18gPSBjb21wcmVzc1V1aWQ7XHJcbiAgICAgICAgICAgIHByZWZhYlN0ci5mb3JFYWNoKChvbmU6IGFueSwgaTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAob25lLmZpbGVJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uZS5maWxlSWQgPSBFZGl0b3IuVXRpbHMuVVVJRC5nZW5lcmF0ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG91dHB1dEpzb25TeW5jKHByZWZhYlBhdGgsIHByZWZhYlN0cik7XHJcbiAgICAgICAgICAgIGF3YWl0IEtLVXRpbHMucmVmcmVzaFJlc0FzeShwcmVmYWJVcmwpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgJHt1aU5hbWV9IGNyZWF0ZWQhYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIHN0YXRpYyBnZXRDb2RlQ291bnQoKSB7XHJcbiAgICAgICAgbGV0IGNvZGVJbmZvID0ge1xyXG4gICAgICAgICAgICBjb2RlOiAwLCAgICAgICAgLy/mnInmlYjooYzmlbBcclxuICAgICAgICAgICAgc3BhY2U6IDAsICAgICAgIC8v56m66KGM5pWwXHJcbiAgICAgICAgICAgIGNvbW1lbnQ6IDAsICAgICAvL+azqOmHiuihjOaVsFxyXG4gICAgICAgICAgICB0b3RhbDogMCwgICAgICAgLy/mgLvooYzmlbBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsZXQgY2hlY2tEaXIgPSAoZGlyUGF0aDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBmaWxlcyA9IHJlYWRkaXJTeW5jKGRpclBhdGgpO1xyXG4gICAgICAgICAgICBmaWxlcy5mb3JFYWNoKChmaWxlTmFtZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHN1YlBhdGggPSBqb2luKGRpclBhdGgsIGZpbGVOYW1lKTtcclxuICAgICAgICAgICAgICAgIGxldCBzdGF0ID0gc3RhdFN5bmMoc3ViUGF0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrRGlyKHN1YlBhdGgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0LmlzRmlsZSgpICYmIGV4dG5hbWUoZmlsZU5hbWUpID09IFwiLnRzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29udGVudCA9IHJlYWRGaWxlU3luYyhzdWJQYXRoLCAndXRmLTgnKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbGluZXMgPSBjb250ZW50LnNwbGl0KCdcXG4nKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5NdWx0aWxpbmVDb21tZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZXMuZm9yRWFjaCgobGluZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJpbUxpbmUgPSBsaW5lLnRyaW0oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmltTGluZSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZUluZm8uc3BhY2UgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmltTGluZS5zdGFydHNXaXRoKFwiLy9cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVJbmZvLmNvbW1lbnQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmltTGluZS5zdGFydHNXaXRoKFwiLypcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVJbmZvLmNvbW1lbnQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluTXVsdGlsaW5lQ29tbWVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHJpbUxpbmUuZW5kc1dpdGgoXCIqL1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZUluZm8uY29tbWVudCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5NdWx0aWxpbmVDb21tZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5NdWx0aWxpbmVDb21tZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlSW5mby5jb21tZW50ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlSW5mby5jb2RlICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY2hlY2tEaXIoam9pbihFZGl0b3IuUHJvamVjdC5wYXRoLCBcImFzc2V0c1wiKSk7XHJcbiAgICAgICAgY29kZUluZm8udG90YWwgPSBjb2RlSW5mby5jb2RlICsgY29kZUluZm8uc3BhY2UgKyBjb2RlSW5mby5jb21tZW50O1xyXG5cclxuICAgICAgICByZXR1cm4gY29kZUluZm87XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldFJlc0NvdW50KCkge1xyXG4gICAgICAgIGxldCBleHRJbmZvOiB7W2tleTogc3RyaW5nXTogeyBudW06IG51bWJlciwgc2l6ZTogbnVtYmVyIH19ID0ge307XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGNoZWNrRGlyID0gKGRpclBhdGg6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBsZXQgZmlsZXMgPSByZWFkZGlyU3luYyhkaXJQYXRoKTtcclxuICAgICAgICAgICAgZmlsZXMuZm9yRWFjaCgoZmlsZU5hbWUpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBzdWJQYXRoID0gam9pbihkaXJQYXRoLCBmaWxlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3RhdCA9IHN0YXRTeW5jKHN1YlBhdGgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0RpcihzdWJQYXRoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdC5pc0ZpbGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBleHQgPSBleHRuYW1lKGZpbGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV4dCkgZXh0ID0gXCJ1bmtub3duXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4dEluZm9bZXh0XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRJbmZvW2V4dF0ubnVtICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dEluZm9bZXh0XS5zaXplICs9IHN0YXQuc2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRJbmZvW2V4dF0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW06IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBzdGF0LnNpemVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNoZWNrRGlyKGpvaW4oRWRpdG9yLlByb2plY3QucGF0aCwgXCJhc3NldHNcIikpO1xyXG5cclxuICAgICAgICByZXR1cm4gZXh0SW5mbztcclxuICAgIH1cclxuXHJcbn0iXX0=