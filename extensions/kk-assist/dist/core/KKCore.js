"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const KKUtils_1 = __importDefault(require("./KKUtils"));
const os_1 = require("os");
class KKCore {
    static async doInitProjAsy(pfx) {
        let fwPath = (0, path_1.join)(Editor.Project.path, "assets", "framework");
        if ((0, fs_extra_1.existsSync)(fwPath)) {
            Editor.Dialog.warn("The project has been initialized!", {
                buttons: ["OK"]
            });
        }
        else {
            console.log("Start initializing ...");
            let dstPath = (0, path_1.join)(Editor.Project.path, "assets");
            let srcPath = (0, path_1.join)(KKUtils_1.default.getPluginPath(), "template", "init");
            let files = (0, fs_extra_1.readdirSync)(srcPath);
            files.forEach((fn) => {
                (0, fs_extra_1.copySync)((0, path_1.join)(srcPath, fn), (0, path_1.join)(dstPath, fn));
            });
            let confPath = (0, path_1.join)(dstPath, "Boot", "Scripts", "GameUIConf.ts");
            if ((0, fs_extra_1.existsSync)(confPath)) {
                (0, fs_extra_1.renameSync)(confPath, confPath.replace("GameUIConf", pfx + "GameUIConf"));
            }
            else {
                console.error("Cannot find the GameUIConf.ts");
                return;
            }
            KKCore.projPrefix = pfx;
            //只是对资源的刷新，如果添加了新代码，代码有个编译时间不包含在内
            //programming:compiled 编译完毕的广播事件
            await KKUtils_1.default.refreshResAsy("db://assets");
            //等待代码编译完毕
            await KKUtils_1.default.checkFramework();
            await KKUtils_1.default.genSceneAsy("db://assets/Boot/Stage.scene");
            await KKUtils_1.default.openSceneAsy("db://assets/Boot/Stage.scene");
            let rootInfo = await KKUtils_1.default.getSceneRootNodeInfoAsy();
            //@ts-ignore
            let nodeUuid = rootInfo.children[0].uuid;
            let uuid1 = await KKUtils_1.default.url2uuidAsy("db://assets/framework/widget/Adapter.ts");
            await KKUtils_1.default.genCompAsy(nodeUuid, Editor.Utils.UUID.compressUUID(uuid1, false));
            let uuid2 = await KKUtils_1.default.url2uuidAsy("db://assets/Boot/Scripts/Stage.ts");
            await KKUtils_1.default.genCompAsy(nodeUuid, Editor.Utils.UUID.compressUUID(uuid2, false));
            await KKUtils_1.default.saveSceneAsy();
            console.log("Initialization complete.");
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    static getBundles() {
        let bundles = [];
        let assetPath = (0, path_1.join)(Editor.Project.path, "assets");
        (0, fs_extra_1.readdirSync)(assetPath).map(itemName => {
            var _a;
            let abPath = (0, path_1.join)(assetPath, itemName);
            if ((0, fs_extra_1.statSync)(abPath).isDirectory() && itemName != "resources") {
                let meta = (0, fs_extra_1.readJsonSync)(abPath + ".meta");
                if ((_a = meta.userData) === null || _a === void 0 ? void 0 : _a.isBundle) {
                    bundles.push(itemName);
                }
            }
        });
        return bundles;
    }
    static async doCreateBundle(bundleName, priority) {
        let bundlePathUrl = "db://assets/" + bundleName;
        let bundlePath = await KKUtils_1.default.url2pathAsy(bundlePathUrl);
        if ((0, fs_extra_1.existsSync)(bundlePath)) {
            Editor.Dialog.warn(bundleName + " already exists", {
                buttons: ["OK"]
            });
            return false;
        }
        else {
            (0, fs_extra_1.mkdirSync)(bundlePath);
            await KKUtils_1.default.refreshResAsy(bundlePathUrl);
            let metaPath = bundlePath + '.meta';
            if ((0, fs_extra_1.existsSync)(metaPath)) {
                let meta = (0, fs_extra_1.readJsonSync)(metaPath);
                meta.userData.isBundle = true;
                meta.userData.priority = priority;
                (0, fs_extra_1.outputJsonSync)(metaPath, meta);
                await KKUtils_1.default.refreshResAsy(bundlePathUrl);
                (0, fs_extra_1.mkdirSync)((0, path_1.join)(bundlePath, "Prefabs"));
                (0, fs_extra_1.mkdirSync)((0, path_1.join)(bundlePath, "Scripts"));
                (0, fs_extra_1.mkdirSync)((0, path_1.join)(bundlePath, "Textures"));
                await KKUtils_1.default.refreshResAsy(bundlePathUrl);
                let confUrl = KKUtils_1.default.getConfUrl(KKCore.projPrefix);
                let confPath = await KKUtils_1.default.url2pathAsy(confUrl);
                let confStr = (0, fs_extra_1.readFileSync)(confPath, 'utf-8');
                if (confStr.indexOf("@bundle") == -1) {
                    confStr += `\nexport const ${KKCore.projPrefix}BundleConf = {\n\t//@bundle\n};`;
                }
                confStr = confStr.replace("//@bundle", `${KKUtils_1.default.removePfxAndSfx(bundleName, KKCore.projPrefix, "Bundle")}: "${bundleName}",\n\t//@bundle`);
                (0, fs_extra_1.writeFileSync)(confPath, confStr);
                await KKUtils_1.default.refreshResAsy(confUrl);
                console.log(bundleName + " created!");
                return true;
            }
            else {
                console.error('Can not find meta file!');
                return false;
            }
        }
    }
    static async doCreateLayer(layerName, bundleName, cacheMode) {
        let isOK = await KKCore.genUIUnit("Layer", layerName, bundleName);
        if (isOK) {
            let bdl = KKUtils_1.default.removePfxAndSfx(bundleName, KKCore.projPrefix, "Bundle");
            let tag = "@layer";
            let caches = cacheMode != 0 ? (cacheMode == 1 ? "\n\t\tcacheMode: UICacheMode.Cache" : "\n\t\tcacheMode: UICacheMode.Stay") : "";
            await KKCore.genUIConf("Layer", layerName, bdl, tag, caches);
        }
    }
    static async doCreatePopup(popupName, bundleName, cacheMode) {
        let isOK = await KKCore.genUIUnit("Popup", popupName, bundleName);
        if (isOK) {
            let bdl = KKUtils_1.default.removePfxAndSfx(bundleName, KKCore.projPrefix, "Bundle");
            let tag = `@${bdl.toLowerCase()}_popup`;
            let caches = cacheMode == 0 ? "" : "\n\t\tcacheMode: UICacheMode.Cache";
            await KKCore.genUIConf("Popup", popupName, bdl, tag, caches);
        }
    }
    static async doCreatePanel(panelName, bundleName, cacheMode) {
        let isOK = await KKCore.genUIUnit("Panel", panelName, bundleName);
        if (isOK) {
            let bdl = KKUtils_1.default.removePfxAndSfx(bundleName, KKCore.projPrefix, "Bundle");
            let tag = `@${bdl.toLowerCase()}_Panel`;
            let caches = cacheMode == 0 ? "" : "\n\t\tcacheMode: UICacheMode.Cache";
            await KKCore.genUIConf("Panel", panelName, bdl, tag, caches);
        }
    }
    static async doCreateWidget(widgetName, bundleName, cacheMode) {
        let isOK = await KKCore.genUIUnit("Widget", widgetName, bundleName);
        if (isOK) {
            let bdl = KKUtils_1.default.removePfxAndSfx(bundleName, KKCore.projPrefix, "Bundle");
            let tag = `@${bdl.toLowerCase()}_Widget`;
            let caches = cacheMode == 0 ? "" : "\n\t\tcacheMode: UICacheMode.Cache";
            await KKCore.genUIConf("Widget", widgetName, bdl, tag, caches);
        }
    }
    static async genUIConf(typeName, uiName, bdl, tag, cacheContent) {
        let confUrl = KKUtils_1.default.getConfUrl(KKCore.projPrefix);
        let confPath = await KKUtils_1.default.url2pathAsy(confUrl);
        let confStr = (0, fs_extra_1.readFileSync)(confPath, 'utf-8');
        if (confStr.indexOf(tag) == -1) {
            confStr += `\nexport const ${KKCore.projPrefix + (typeName == "Layer" ? "" : bdl)}${typeName}Conf = {\n\t//${tag}\n};\n`;
        }
        confStr = confStr.replace("//" + tag, `${KKUtils_1.default.removePfxAndSfx(uiName, KKCore.projPrefix, typeName)}: <IUIConfig> {
        bundle: ${KKCore.projPrefix}BundleConf.${bdl},
        name: "${uiName}",${cacheContent}
    },

    //${tag}`);
        (0, fs_extra_1.writeFileSync)(confPath, confStr);
        await KKUtils_1.default.refreshResAsy(confUrl);
    }
    static async genUIUnit(typeName, uiName, bundleName) {
        let bundleUrl = "db://assets/" + bundleName;
        let typeDirUrl = `${bundleUrl}/Prefabs/${typeName}`;
        let typeDirPath = await KKUtils_1.default.url2pathAsy(typeDirUrl);
        if (!(0, fs_extra_1.existsSync)(typeDirPath)) {
            (0, fs_extra_1.mkdirSync)(typeDirPath);
            await KKUtils_1.default.refreshResAsy(typeDirUrl);
        }
        let prefabUrl = `${typeDirUrl}/${uiName}.prefab`;
        let prefabPath = await KKUtils_1.default.url2pathAsy(prefabUrl);
        if ((0, fs_extra_1.existsSync)(prefabPath)) {
            Editor.Dialog.warn(uiName + " already exists", {
                buttons: ["OK"]
            });
            return false;
        }
        else {
            let tsUrl = bundleUrl + "/Scripts/" + uiName + ".ts";
            let tsPath = await KKUtils_1.default.url2pathAsy(tsUrl);
            (0, fs_extra_1.copyFileSync)((0, path_1.join)(KKUtils_1.default.getPluginPath(), "template", `Template${typeName}.ts`), tsPath);
            (0, fs_extra_1.copyFileSync)((0, path_1.join)(KKUtils_1.default.getPluginPath(), "template", "TemplatePfb.prefab"), prefabPath);
            let tsStr = (0, fs_extra_1.readFileSync)(tsPath).toString();
            tsStr = tsStr.replace("@author", "@author " + (0, os_1.hostname)());
            tsStr = tsStr.replace("@created", "@created " + (new Date()).toLocaleString());
            (0, fs_extra_1.writeFileSync)(tsPath, tsStr.replace(new RegExp("NewClass", 'g'), uiName));
            await KKUtils_1.default.refreshResAsy(tsUrl);
            let tsUUID = await KKUtils_1.default.url2uuidAsy(tsUrl);
            let compressUuid = Editor.Utils.UUID.compressUUID(tsUUID, false);
            let prefabStr = (0, fs_extra_1.readJsonSync)(prefabPath);
            prefabStr[0]._name = uiName;
            prefabStr[1]._name = uiName;
            prefabStr[6].__type__ = compressUuid;
            prefabStr.forEach((one, i) => {
                if (one.fileId) {
                    one.fileId = Editor.Utils.UUID.generate(true);
                }
            });
            (0, fs_extra_1.outputJsonSync)(prefabPath, prefabStr);
            await KKUtils_1.default.refreshResAsy(prefabUrl);
            console.log(`${uiName} created!`);
            return true;
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    static getCodeCount() {
        let codeInfo = {
            code: 0, //有效行数
            space: 0, //空行数
            comment: 0, //注释行数
            total: 0, //总行数
        };
        let checkDir = (dirPath) => {
            let files = (0, fs_extra_1.readdirSync)(dirPath);
            files.forEach((fileName) => {
                let subPath = (0, path_1.join)(dirPath, fileName);
                let stat = (0, fs_extra_1.statSync)(subPath);
                if (stat.isDirectory()) {
                    checkDir(subPath);
                }
                else if (stat.isFile() && (0, path_1.extname)(fileName) == ".ts") {
                    let content = (0, fs_extra_1.readFileSync)(subPath, 'utf-8');
                    let lines = content.split('\n');
                    let inMultilineComment = false;
                    lines.forEach((line) => {
                        let trimLine = line.trim();
                        if (trimLine === "") {
                            codeInfo.space += 1;
                        }
                        else if (trimLine.startsWith("//")) {
                            codeInfo.comment += 1;
                        }
                        else if (trimLine.startsWith("/*")) {
                            codeInfo.comment += 1;
                            inMultilineComment = true;
                        }
                        else if (trimLine.endsWith("*/")) {
                            codeInfo.comment += 1;
                            inMultilineComment = false;
                        }
                        else if (inMultilineComment) {
                            codeInfo.comment += 1;
                        }
                        else {
                            codeInfo.code += 1;
                        }
                    });
                }
            });
        };
        checkDir((0, path_1.join)(Editor.Project.path, "assets"));
        codeInfo.total = codeInfo.code + codeInfo.space + codeInfo.comment;
        return codeInfo;
    }
    static getResCount() {
        let extInfo = {};
        let checkDir = (dirPath) => {
            let files = (0, fs_extra_1.readdirSync)(dirPath);
            files.forEach((fileName) => {
                let subPath = (0, path_1.join)(dirPath, fileName);
                let stat = (0, fs_extra_1.statSync)(subPath);
                if (stat.isDirectory()) {
                    checkDir(subPath);
                }
                else if (stat.isFile()) {
                    let ext = (0, path_1.extname)(fileName);
                    if (!ext)
                        ext = "unknown";
                    if (extInfo[ext]) {
                        extInfo[ext].num += 1;
                        extInfo[ext].size += stat.size;
                    }
                    else {
                        extInfo[ext] = {
                            num: 1,
                            size: stat.size
                        };
                    }
                }
            });
        };
        checkDir((0, path_1.join)(Editor.Project.path, "assets"));
        return extInfo;
    }
}
KKCore.projPrefix = "";
exports.default = KKCore;
//# sourceMappingURL=data:application/json;base64,