"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const KKUtils_1 = __importDefault(require("./KKUtils"));
const os_1 = require("os");
class KKCore {
    static async doInitProjAsy(pfx) {
        let fwPath = (0, path_1.join)(Editor.Project.path, "assets", "framework");
        if ((0, fs_extra_1.existsSync)(fwPath)) {
            Editor.Dialog.warn("The project has been initialized!", {
                buttons: ["OK"]
            });
        }
        else {
            let dstPath = (0, path_1.join)(Editor.Project.path, "assets");
            let srcPath = (0, path_1.join)(KKUtils_1.default.getPluginPath(), "template", "init");
            let files = (0, fs_extra_1.readdirSync)(srcPath);
            files.forEach((fn) => {
                (0, fs_extra_1.copySync)((0, path_1.join)(srcPath, fn), (0, path_1.join)(dstPath, fn));
            });
            let confPath = (0, path_1.join)(dstPath, "Boot", "Scripts", "GameUIConf.ts");
            if ((0, fs_extra_1.existsSync)(confPath)) {
                (0, fs_extra_1.renameSync)(confPath, confPath.replace("GameUIConf", pfx + "GameUIConf"));
            }
            else {
                console.error("Cannot find the GameUIConf.ts");
                return;
            }
            KKCore.projPrefix = pfx;
            await KKUtils_1.default.refreshResAsy("db://assets");
            //刷新后，手动间隔，避免组件找不到
            await KKUtils_1.default.sleepAsy(0.6);
            await KKUtils_1.default.genSceneAsy("db://assets/Boot/Stage.scene");
            await KKUtils_1.default.openSceneAsy("db://assets/Boot/Stage.scene");
            let rootInfo = await KKUtils_1.default.getSceneRootNodeInfoAsy();
            //@ts-ignore
            let nodeUuid = rootInfo.children[0].uuid;
            await KKUtils_1.default.genCompAsy(nodeUuid, "Adapter");
            await KKUtils_1.default.genCompAsy(nodeUuid, "Stage");
            await KKUtils_1.default.saveSceneAsy();
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    static getBundles() {
        let bundles = [];
        let assetPath = (0, path_1.join)(Editor.Project.path, "assets");
        (0, fs_extra_1.readdirSync)(assetPath).map(itemName => {
            var _a;
            let abPath = (0, path_1.join)(assetPath, itemName);
            if ((0, fs_extra_1.statSync)(abPath).isDirectory() && itemName != "resources") {
                let meta = (0, fs_extra_1.readJsonSync)(abPath + ".meta");
                if ((_a = meta.userData) === null || _a === void 0 ? void 0 : _a.isBundle) {
                    bundles.push(itemName);
                }
            }
        });
        return bundles;
    }
    static async doCreateBundle(bundleName, priority) {
        let bundlePathUrl = "db://assets/" + bundleName;
        let bundlePath = await KKUtils_1.default.url2pathAsy(bundlePathUrl);
        if ((0, fs_extra_1.existsSync)(bundlePath)) {
            Editor.Dialog.warn(bundleName + " already exists", {
                buttons: ["OK"]
            });
            return false;
        }
        else {
            (0, fs_extra_1.mkdirSync)(bundlePath);
            await KKUtils_1.default.refreshResAsy(bundlePathUrl);
            let metaPath = bundlePath + '.meta';
            if ((0, fs_extra_1.existsSync)(metaPath)) {
                let meta = (0, fs_extra_1.readJsonSync)(metaPath);
                meta.userData.isBundle = true;
                meta.userData.priority = priority;
                (0, fs_extra_1.outputJsonSync)(metaPath, meta);
                await KKUtils_1.default.refreshResAsy(bundlePathUrl);
                (0, fs_extra_1.mkdirSync)((0, path_1.join)(bundlePath, "Prefabs"));
                (0, fs_extra_1.mkdirSync)((0, path_1.join)(bundlePath, "Scripts"));
                (0, fs_extra_1.mkdirSync)((0, path_1.join)(bundlePath, "Textures"));
                await KKUtils_1.default.refreshResAsy(bundlePathUrl);
                let confUrl = KKUtils_1.default.getConfUrl(KKCore.projPrefix);
                let confPath = await KKUtils_1.default.url2pathAsy(confUrl);
                let confStr = (0, fs_extra_1.readFileSync)(confPath, 'utf-8');
                if (confStr.indexOf("@bundle") == -1) {
                    confStr += `\nexport const ${KKCore.projPrefix}BundleConf = {\n\t//@bundle\n};`;
                }
                confStr = confStr.replace("//@bundle", `${KKUtils_1.default.removePfxAndSfx(bundleName, KKCore.projPrefix, "Bundle")}: "${bundleName}"\n\t//@bundle`);
                (0, fs_extra_1.writeFileSync)(confPath, confStr);
                await KKUtils_1.default.refreshResAsy(confUrl);
                console.log(bundleName + " created!");
                return true;
            }
            else {
                console.error('Can not find meta file!');
                return false;
            }
        }
    }
    static doCreateLayer(layerName, bundleName) {
        KKCore.genUIUnit("Layer", layerName, bundleName);
    }
    static doCreatePopup(popupName, bundleName) {
        KKCore.genUIUnit("Popup", popupName, bundleName);
    }
    static doCreatePanel(panelName, bundleName) {
        KKCore.genUIUnit("Panel", panelName, bundleName);
    }
    static doCreateWidget(widgetName, bundleName) {
        KKCore.genUIUnit("Widget", widgetName, bundleName);
    }
    static async genUIUnit(typeName, uiName, bundleName) {
        let bundleUrl = "db://assets/" + bundleName;
        let typeDirUrl = `${bundleUrl}/Prefabs/${typeName}`;
        let typeDirPath = await KKUtils_1.default.url2pathAsy(typeDirUrl);
        if (!(0, fs_extra_1.existsSync)(typeDirPath)) {
            (0, fs_extra_1.mkdirSync)(typeDirPath);
            await KKUtils_1.default.refreshResAsy(typeDirUrl);
        }
        let prefabUrl = `${typeDirUrl}/${uiName}.prefab`;
        let prefabPath = await KKUtils_1.default.url2pathAsy(prefabUrl);
        if ((0, fs_extra_1.existsSync)(prefabPath)) {
            Editor.Dialog.warn(uiName + " already exists", {
                buttons: ["OK"]
            });
        }
        else {
            let tsUrl = bundleUrl + "/Scripts/" + uiName + ".ts";
            let tsPath = await KKUtils_1.default.url2pathAsy(tsUrl);
            (0, fs_extra_1.copyFileSync)((0, path_1.join)(KKUtils_1.default.getPluginPath(), "template", `Template${typeName}.ts`), tsPath);
            (0, fs_extra_1.copyFileSync)((0, path_1.join)(KKUtils_1.default.getPluginPath(), "template", "TemplatePfb.prefab"), prefabPath);
            let tsStr = (0, fs_extra_1.readFileSync)(tsPath).toString();
            tsStr = tsStr.replace("@author", "@author " + (0, os_1.hostname)());
            tsStr = tsStr.replace("@created", "@created " + (new Date()).toLocaleString());
            (0, fs_extra_1.writeFileSync)(tsPath, tsStr.replace(new RegExp("NewClass", 'g'), uiName));
            await KKUtils_1.default.refreshResAsy(tsUrl);
            let tsUUID = await KKUtils_1.default.url2uuidAsy(tsUrl);
            let compressUuid = Editor.Utils.UUID.compressUUID(tsUUID, false);
            let prefabStr = (0, fs_extra_1.readJsonSync)(prefabPath);
            prefabStr[0]._name = uiName;
            prefabStr[1]._name = uiName;
            prefabStr[6].__type__ = compressUuid;
            prefabStr.forEach((one, i) => {
                if (one.fileId) {
                    one.fileId = Editor.Utils.UUID.generate(true);
                }
            });
            (0, fs_extra_1.outputJsonSync)(prefabPath, prefabStr);
            await KKUtils_1.default.refreshResAsy(prefabUrl);
            console.log(`${uiName} created!`);
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////
    static getCodeCount() {
        let codeInfo = {
            code: 0, //有效行数
            space: 0, //空行数
            comment: 0, //注释行数
            total: 0, //总行数
        };
        let checkDir = (dirPath) => {
            let files = (0, fs_extra_1.readdirSync)(dirPath);
            files.forEach((fileName) => {
                let subPath = (0, path_1.join)(dirPath, fileName);
                let stat = (0, fs_extra_1.statSync)(subPath);
                if (stat.isDirectory()) {
                    checkDir(subPath);
                }
                else if (stat.isFile() && (0, path_1.extname)(fileName) == ".ts") {
                    let content = (0, fs_extra_1.readFileSync)(subPath, 'utf-8');
                    let lines = content.split('\n');
                    let inMultilineComment = false;
                    lines.forEach((line) => {
                        let trimLine = line.trim();
                        if (trimLine === "") {
                            codeInfo.space += 1;
                        }
                        else if (trimLine.startsWith("//")) {
                            codeInfo.comment += 1;
                        }
                        else if (trimLine.startsWith("/*")) {
                            codeInfo.comment += 1;
                            inMultilineComment = true;
                        }
                        else if (trimLine.endsWith("*/")) {
                            codeInfo.comment += 1;
                            inMultilineComment = false;
                        }
                        else if (inMultilineComment) {
                            codeInfo.comment += 1;
                        }
                        else {
                            codeInfo.code += 1;
                        }
                    });
                }
            });
        };
        checkDir((0, path_1.join)(Editor.Project.path, "assets"));
        codeInfo.total = codeInfo.code + codeInfo.space + codeInfo.comment;
        return codeInfo;
    }
    static getResCount() {
        let extInfo = {};
        let checkDir = (dirPath) => {
            let files = (0, fs_extra_1.readdirSync)(dirPath);
            files.forEach((fileName) => {
                let subPath = (0, path_1.join)(dirPath, fileName);
                let stat = (0, fs_extra_1.statSync)(subPath);
                if (stat.isDirectory()) {
                    checkDir(subPath);
                }
                else if (stat.isFile()) {
                    let ext = (0, path_1.extname)(fileName);
                    if (!ext)
                        ext = "unknown";
                    if (extInfo[ext]) {
                        extInfo[ext].num += 1;
                        extInfo[ext].size += stat.size;
                    }
                    else {
                        extInfo[ext] = {
                            num: 1,
                            size: stat.size
                        };
                    }
                }
            });
        };
        checkDir((0, path_1.join)(Editor.Project.path, "assets"));
        return extInfo;
    }
}
KKCore.projPrefix = "";
exports.default = KKCore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS0tDb3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc291cmNlL2NvcmUvS0tDb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsdUNBQXVLO0FBQ3ZLLCtCQUFxQztBQUNyQyx3REFBZ0M7QUFDaEMsMkJBQThCO0FBRTlCLE1BQXFCLE1BQU07SUFJdkIsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBVztRQUNsQyxJQUFJLE1BQU0sR0FBRyxJQUFBLFdBQUksRUFBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDOUQsSUFBSSxJQUFBLHFCQUFVLEVBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztZQUNyQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxtQ0FBbUMsRUFBRTtnQkFDcEQsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO2FBQ2xCLENBQUMsQ0FBQztRQUNQLENBQUM7YUFBTSxDQUFDO1lBQ0osSUFBSSxPQUFPLEdBQUcsSUFBQSxXQUFJLEVBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFFbEQsSUFBSSxPQUFPLEdBQUcsSUFBQSxXQUFJLEVBQUMsaUJBQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDaEUsSUFBSSxLQUFLLEdBQUcsSUFBQSxzQkFBVyxFQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2pDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtnQkFDakIsSUFBQSxtQkFBUSxFQUFDLElBQUEsV0FBSSxFQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFBLFdBQUksRUFBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNuRCxDQUFDLENBQUMsQ0FBQztZQUVILElBQUksUUFBUSxHQUFHLElBQUEs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QUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUM7b0JBQ25DLENBQUM7eUJBQU0sQ0FBQzt3QkFDSixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUc7NEJBQ1gsR0FBRyxFQUFFLENBQUM7NEJBQ04sSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO3lCQUNsQixDQUFDO29CQUNOLENBQUM7Z0JBQ0wsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDO1FBRUYsUUFBUSxDQUFDLElBQUEsV0FBSSxFQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFOUMsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQzs7QUF2UE0saUJBQVUsR0FBVyxFQUFFLENBQUM7a0JBRmQsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBjb3B5RmlsZVN5bmMsIGNvcHlTeW5jLCBleGlzdHNTeW5jLCBta2RpclN5bmMsIG91dHB1dEpzb25TeW5jLCByZWFkRmlsZVN5bmMsIHJlYWRKc29uU3luYywgcmVhZGRpclN5bmMsIHJlbmFtZVN5bmMsIHN0YXRTeW5jLCB3cml0ZUZpbGVTeW5jIH0gZnJvbSBcImZzLWV4dHJhXCI7XHJcbmltcG9ydCB7IGV4dG5hbWUsIGpvaW4gfSBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgS0tVdGlscyBmcm9tIFwiLi9LS1V0aWxzXCI7XHJcbmltcG9ydCB7IGhvc3RuYW1lIH0gZnJvbSBcIm9zXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLS0NvcmUge1xyXG5cclxuICAgIHN0YXRpYyBwcm9qUHJlZml4OiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuICAgIHN0YXRpYyBhc3luYyBkb0luaXRQcm9qQXN5KHBmeDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGZ3UGF0aCA9IGpvaW4oRWRpdG9yLlByb2plY3QucGF0aCwgXCJhc3NldHNcIiwgXCJmcmFtZXdvcmtcIik7XHJcbiAgICAgICAgaWYgKGV4aXN0c1N5bmMoZndQYXRoKSkge1xyXG4gICAgICAgICAgICBFZGl0b3IuRGlhbG9nLndhcm4oXCJUaGUgcHJvamVjdCBoYXMgYmVlbiBpbml0aWFsaXplZCFcIiwge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uczogW1wiT0tcIl1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGRzdFBhdGggPSBqb2luKEVkaXRvci5Qcm9qZWN0LnBhdGgsIFwiYXNzZXRzXCIpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNyY1BhdGggPSBqb2luKEtLVXRpbHMuZ2V0UGx1Z2luUGF0aCgpLCBcInRlbXBsYXRlXCIsIFwiaW5pdFwiKTtcclxuICAgICAgICAgICAgbGV0IGZpbGVzID0gcmVhZGRpclN5bmMoc3JjUGF0aCk7XHJcbiAgICAgICAgICAgIGZpbGVzLmZvckVhY2goKGZuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb3B5U3luYyhqb2luKHNyY1BhdGgsIGZuKSwgam9pbihkc3RQYXRoLCBmbikpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25mUGF0aCA9IGpvaW4oZHN0UGF0aCwgXCJCb290XCIsIFwiU2NyaXB0c1wiLCBcIkdhbWVVSUNvbmYudHNcIik7XHJcbiAgICAgICAgICAgIGlmIChleGlzdHNTeW5jKGNvbmZQYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgcmVuYW1lU3luYyhjb25mUGF0aCwgY29uZlBhdGgucmVwbGFjZShcIkdhbWVVSUNvbmZcIiwgcGZ4ICsgXCJHYW1lVUlDb25mXCIpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgZmluZCB0aGUgR2FtZVVJQ29uZi50c1wiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBLS0NvcmUucHJvalByZWZpeCA9IHBmeDtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IEtLVXRpbHMucmVmcmVzaFJlc0FzeShcImRiOi8vYXNzZXRzXCIpO1xyXG4gICAgICAgICAgICAvL+WIt+aWsOWQju+8jOaJi+WKqOmXtOmalO+8jOmBv+WFjee7hOS7tuaJvuS4jeWIsFxyXG4gICAgICAgICAgICBhd2FpdCBLS1V0aWxzLnNsZWVwQXN5KDAuNik7XHJcblxyXG4gICAgICAgICAgICBhd2FpdCBLS1V0aWxzLmdlblNjZW5lQXN5KFwiZGI6Ly9hc3NldHMvQm9vdC9TdGFnZS5zY2VuZVwiKTtcclxuICAgICAgICAgICAgYXdhaXQgS0tVdGlscy5vcGVuU2NlbmVBc3koXCJkYjovL2Fzc2V0cy9Cb290L1N0YWdlLnNjZW5lXCIpO1xyXG4gICAgICAgICAgICBsZXQgcm9vdEluZm8gPSBhd2FpdCBLS1V0aWxzLmdldFNjZW5lUm9vdE5vZGVJbmZvQXN5KCk7XHJcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBsZXQgbm9kZVV1aWQ6IHN0cmluZyA9IHJvb3RJbmZvLmNoaWxkcmVuWzBdLnV1aWQ7XHJcbiAgICAgICAgICAgIGF3YWl0IEtLVXRpbHMuZ2VuQ29tcEFzeShub2RlVXVpZCwgXCJBZGFwdGVyXCIpO1xyXG4gICAgICAgICAgICBhd2FpdCBLS1V0aWxzLmdlbkNvbXBBc3kobm9kZVV1aWQsIFwiU3RhZ2VcIik7XHJcbiAgICAgICAgICAgIGF3YWl0IEtLVXRpbHMuc2F2ZVNjZW5lQXN5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIHN0YXRpYyBnZXRCdW5kbGVzKCkge1xyXG4gICAgICAgIGxldCBidW5kbGVzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgIGxldCBhc3NldFBhdGggPSBqb2luKEVkaXRvci5Qcm9qZWN0LnBhdGgsIFwiYXNzZXRzXCIpO1xyXG4gICAgICAgIHJlYWRkaXJTeW5jKGFzc2V0UGF0aCkubWFwKGl0ZW1OYW1lID0+IHtcclxuICAgICAgICAgICAgbGV0IGFiUGF0aCA9IGpvaW4oYXNzZXRQYXRoLCBpdGVtTmFtZSk7XHJcbiAgICAgICAgICAgIGlmIChzdGF0U3luYyhhYlBhdGgpLmlzRGlyZWN0b3J5KCkgJiYgaXRlbU5hbWUgIT0gXCJyZXNvdXJjZXNcIikge1xyXG4gICAgICAgICAgICAgICAgbGV0IG1ldGEgPSByZWFkSnNvblN5bmMoYWJQYXRoICsgXCIubWV0YVwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChtZXRhLnVzZXJEYXRhPy5pc0J1bmRsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1bmRsZXMucHVzaChpdGVtTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gYnVuZGxlcztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgZG9DcmVhdGVCdW5kbGUoYnVuZGxlTmFtZTogc3RyaW5nLCBwcmlvcml0eTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGJ1bmRsZVBhdGhVcmwgPSBcImRiOi8vYXNzZXRzL1wiICsgYnVuZGxlTmFtZTtcclxuICAgICAgICBsZXQgYnVuZGxlUGF0aCA9IGF3YWl0IEtLVXRpbHMudXJsMnBhdGhBc3koYnVuZGxlUGF0aFVybCk7XHJcblxyXG4gICAgICAgIGlmIChleGlzdHNTeW5jKGJ1bmRsZVBhdGgpKSB7XHJcbiAgICAgICAgICAgIEVkaXRvci5EaWFsb2cud2FybihidW5kbGVOYW1lICsgXCIgYWxyZWFkeSBleGlzdHNcIiwge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uczogW1wiT0tcIl1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBta2RpclN5bmMoYnVuZGxlUGF0aCk7XHJcbiAgICAgICAgICAgIGF3YWl0IEtLVXRpbHMucmVmcmVzaFJlc0FzeShidW5kbGVQYXRoVXJsKTtcclxuICAgIFxyXG4gICAgICAgICAgICBsZXQgbWV0YVBhdGggPSBidW5kbGVQYXRoICsgJy5tZXRhJztcclxuICAgICAgICAgICAgaWYgKGV4aXN0c1N5bmMobWV0YVBhdGgpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbWV0YSA9IHJlYWRKc29uU3luYyhtZXRhUGF0aCk7XHJcbiAgICAgICAgICAgICAgICBtZXRhLnVzZXJEYXRhLmlzQnVuZGxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIG1ldGEudXNlckRhdGEucHJpb3JpdHkgPSBwcmlvcml0eTtcclxuICAgICAgICAgICAgICAgIG91dHB1dEpzb25TeW5jKG1ldGFQYXRoLCBtZXRhKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IEtLVXRpbHMucmVmcmVzaFJlc0FzeShidW5kbGVQYXRoVXJsKTtcclxuXHJcbiAgICAgICAgICAgICAgICBta2RpclN5bmMoam9pbihidW5kbGVQYXRoLCBcIlByZWZhYnNcIikpO1xyXG4gICAgICAgICAgICAgICAgbWtkaXJTeW5jKGpvaW4oYnVuZGxlUGF0aCwgXCJTY3JpcHRzXCIpKTtcclxuICAgICAgICAgICAgICAgIG1rZGlyU3luYyhqb2luKGJ1bmRsZVBhdGgsIFwiVGV4dHVyZXNcIikpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgS0tVdGlscy5yZWZyZXNoUmVzQXN5KGJ1bmRsZVBhdGhVcmwpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjb25mVXJsID0gS0tVdGlscy5nZXRDb25mVXJsKEtLQ29yZS5wcm9qUHJlZml4KTtcclxuICAgICAgICAgICAgICAgIGxldCBjb25mUGF0aCA9IGF3YWl0IEtLVXRpbHMudXJsMnBhdGhBc3koY29uZlVybCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29uZlN0ciA9IHJlYWRGaWxlU3luYyhjb25mUGF0aCwgJ3V0Zi04Jyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29uZlN0ci5pbmRleE9mKFwiQGJ1bmRsZVwiKSA9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZTdHIgKz0gYFxcbmV4cG9ydCBjb25zdCAke0tLQ29yZS5wcm9qUHJlZml4fUJ1bmRsZUNvbmYgPSB7XFxuXFx0Ly9AYnVuZGxlXFxufTtgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uZlN0ciA9IGNvbmZTdHIucmVwbGFjZShcIi8vQGJ1bmRsZVwiLCBgJHtLS1V0aWxzLnJlbW92ZVBmeEFuZFNmeChidW5kbGVOYW1lLCBLS0NvcmUucHJvalByZWZpeCwgXCJCdW5kbGVcIil9OiBcIiR7YnVuZGxlTmFtZX1cIlxcblxcdC8vQGJ1bmRsZWApO1xyXG4gICAgICAgICAgICAgICAgd3JpdGVGaWxlU3luYyhjb25mUGF0aCwgY29uZlN0cik7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBLS1V0aWxzLnJlZnJlc2hSZXNBc3koY29uZlVybCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYnVuZGxlTmFtZSArIFwiIGNyZWF0ZWQhXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdDYW4gbm90IGZpbmQgbWV0YSBmaWxlIScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBkb0NyZWF0ZUxheWVyKGxheWVyTmFtZTogc3RyaW5nLCBidW5kbGVOYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBLS0NvcmUuZ2VuVUlVbml0KFwiTGF5ZXJcIiwgbGF5ZXJOYW1lLCBidW5kbGVOYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZG9DcmVhdGVQb3B1cChwb3B1cE5hbWU6IHN0cmluZywgYnVuZGxlTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgS0tDb3JlLmdlblVJVW5pdChcIlBvcHVwXCIsIHBvcHVwTmFtZSwgYnVuZGxlTmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGRvQ3JlYXRlUGFuZWwocGFuZWxOYW1lOiBzdHJpbmcsIGJ1bmRsZU5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIEtLQ29yZS5nZW5VSVVuaXQoXCJQYW5lbFwiLCBwYW5lbE5hbWUsIGJ1bmRsZU5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBkb0NyZWF0ZVdpZGdldCh3aWRnZXROYW1lOiBzdHJpbmcsIGJ1bmRsZU5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIEtLQ29yZS5nZW5VSVVuaXQoXCJXaWRnZXRcIiwgd2lkZ2V0TmFtZSwgYnVuZGxlTmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIGdlblVJVW5pdCh0eXBlTmFtZTogc3RyaW5nLCB1aU5hbWU6IHN0cmluZywgYnVuZGxlTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IGJ1bmRsZVVybCA9IFwiZGI6Ly9hc3NldHMvXCIgKyBidW5kbGVOYW1lO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCB0eXBlRGlyVXJsID0gYCR7YnVuZGxlVXJsfS9QcmVmYWJzLyR7dHlwZU5hbWV9YDtcclxuICAgICAgICBsZXQgdHlwZURpclBhdGggPSBhd2FpdCBLS1V0aWxzLnVybDJwYXRoQXN5KHR5cGVEaXJVcmwpO1xyXG4gICAgICAgIGlmICghZXhpc3RzU3luYyh0eXBlRGlyUGF0aCkpIHtcclxuICAgICAgICAgICAgbWtkaXJTeW5jKHR5cGVEaXJQYXRoKTtcclxuICAgICAgICAgICAgYXdhaXQgS0tVdGlscy5yZWZyZXNoUmVzQXN5KHR5cGVEaXJVcmwpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIGxldCBwcmVmYWJVcmwgPSBgJHt0eXBlRGlyVXJsfS8ke3VpTmFtZX0ucHJlZmFiYDtcclxuICAgICAgICBsZXQgcHJlZmFiUGF0aCA9IGF3YWl0IEtLVXRpbHMudXJsMnBhdGhBc3kocHJlZmFiVXJsKTtcclxuICAgICAgICBpZiAoZXhpc3RzU3luYyhwcmVmYWJQYXRoKSkge1xyXG4gICAgICAgICAgICBFZGl0b3IuRGlhbG9nLndhcm4odWlOYW1lICsgXCIgYWxyZWFkeSBleGlzdHNcIiwge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uczogW1wiT0tcIl1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHRzVXJsID0gYnVuZGxlVXJsICsgXCIvU2NyaXB0cy9cIiArIHVpTmFtZSArIFwiLnRzXCI7XHJcbiAgICAgICAgICAgIGxldCB0c1BhdGggPSBhd2FpdCBLS1V0aWxzLnVybDJwYXRoQXN5KHRzVXJsKTtcclxuICAgICAgICAgICAgY29weUZpbGVTeW5jKGpvaW4oS0tVdGlscy5nZXRQbHVnaW5QYXRoKCksIFwidGVtcGxhdGVcIiwgYFRlbXBsYXRlJHt0eXBlTmFtZX0udHNgKSwgdHNQYXRoKTtcclxuICAgICAgICAgICAgY29weUZpbGVTeW5jKGpvaW4oS0tVdGlscy5nZXRQbHVnaW5QYXRoKCksIFwidGVtcGxhdGVcIiwgXCJUZW1wbGF0ZVBmYi5wcmVmYWJcIiksIHByZWZhYlBhdGgpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIGxldCB0c1N0ciA9IHJlYWRGaWxlU3luYyh0c1BhdGgpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHRzU3RyID0gdHNTdHIucmVwbGFjZShcIkBhdXRob3JcIiwgXCJAYXV0aG9yIFwiICsgaG9zdG5hbWUoKSk7XHJcbiAgICAgICAgICAgIHRzU3RyID0gdHNTdHIucmVwbGFjZShcIkBjcmVhdGVkXCIsIFwiQGNyZWF0ZWQgXCIgKyAobmV3IERhdGUoKSkudG9Mb2NhbGVTdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIHdyaXRlRmlsZVN5bmModHNQYXRoLCB0c1N0ci5yZXBsYWNlKG5ldyBSZWdFeHAoXCJOZXdDbGFzc1wiLCAnZycpLCB1aU5hbWUpKTtcclxuICAgIFxyXG4gICAgICAgICAgICBhd2FpdCBLS1V0aWxzLnJlZnJlc2hSZXNBc3kodHNVcmwpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHRzVVVJRCA9IGF3YWl0IEtLVXRpbHMudXJsMnV1aWRBc3kodHNVcmwpO1xyXG4gICAgICAgICAgICBsZXQgY29tcHJlc3NVdWlkID0gRWRpdG9yLlV0aWxzLlVVSUQuY29tcHJlc3NVVUlEKHRzVVVJRCwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHByZWZhYlN0ciA9IHJlYWRKc29uU3luYyhwcmVmYWJQYXRoKTtcclxuICAgICAgICAgICAgcHJlZmFiU3RyWzBdLl9uYW1lID0gdWlOYW1lO1xyXG4gICAgICAgICAgICBwcmVmYWJTdHJbMV0uX25hbWUgPSB1aU5hbWU7XHJcbiAgICAgICAgICAgIHByZWZhYlN0cls2XS5fX3R5cGVfXyA9IGNvbXByZXNzVXVpZDtcclxuICAgICAgICAgICAgcHJlZmFiU3RyLmZvckVhY2goKG9uZTogYW55LCBpOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChvbmUuZmlsZUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25lLmZpbGVJZCA9IEVkaXRvci5VdGlscy5VVUlELmdlbmVyYXRlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgb3V0cHV0SnNvblN5bmMocHJlZmFiUGF0aCwgcHJlZmFiU3RyKTtcclxuICAgICAgICAgICAgYXdhaXQgS0tVdGlscy5yZWZyZXNoUmVzQXN5KHByZWZhYlVybCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke3VpTmFtZX0gY3JlYXRlZCFgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgc3RhdGljIGdldENvZGVDb3VudCgpIHtcclxuICAgICAgICBsZXQgY29kZUluZm8gPSB7XHJcbiAgICAgICAgICAgIGNvZGU6IDAsICAgICAgICAvL+acieaViOihjOaVsFxyXG4gICAgICAgICAgICBzcGFjZTogMCwgICAgICAgLy/nqbrooYzmlbBcclxuICAgICAgICAgICAgY29tbWVudDogMCwgICAgIC8v5rOo6YeK6KGM5pWwXHJcbiAgICAgICAgICAgIHRvdGFsOiAwLCAgICAgICAvL+aAu+ihjOaVsFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGxldCBjaGVja0RpciA9IChkaXJQYXRoOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgbGV0IGZpbGVzID0gcmVhZGRpclN5bmMoZGlyUGF0aCk7XHJcbiAgICAgICAgICAgIGZpbGVzLmZvckVhY2goKGZpbGVOYW1lKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3ViUGF0aCA9IGpvaW4oZGlyUGF0aCwgZmlsZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHN0YXQgPSBzdGF0U3luYyhzdWJQYXRoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdC5pc0RpcmVjdG9yeSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tEaXIoc3ViUGF0aCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXQuaXNGaWxlKCkgJiYgZXh0bmFtZShmaWxlTmFtZSkgPT0gXCIudHNcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb250ZW50ID0gcmVhZEZpbGVTeW5jKHN1YlBhdGgsICd1dGYtOCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbk11bHRpbGluZUNvbW1lbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lcy5mb3JFYWNoKChsaW5lKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0cmltTGluZSA9IGxpbmUudHJpbSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyaW1MaW5lID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlSW5mby5zcGFjZSArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyaW1MaW5lLnN0YXJ0c1dpdGgoXCIvL1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZUluZm8uY29tbWVudCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyaW1MaW5lLnN0YXJ0c1dpdGgoXCIvKlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZUluZm8uY29tbWVudCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5NdWx0aWxpbmVDb21tZW50ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0cmltTGluZS5lbmRzV2l0aChcIiovXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlSW5mby5jb21tZW50ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbk11bHRpbGluZUNvbW1lbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpbk11bHRpbGluZUNvbW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVJbmZvLmNvbW1lbnQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVJbmZvLmNvZGUgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjaGVja0Rpcihqb2luKEVkaXRvci5Qcm9qZWN0LnBhdGgsIFwiYXNzZXRzXCIpKTtcclxuICAgICAgICBjb2RlSW5mby50b3RhbCA9IGNvZGVJbmZvLmNvZGUgKyBjb2RlSW5mby5zcGFjZSArIGNvZGVJbmZvLmNvbW1lbnQ7XHJcblxyXG4gICAgICAgIHJldHVybiBjb2RlSW5mbztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0UmVzQ291bnQoKSB7XHJcbiAgICAgICAgbGV0IGV4dEluZm86IHtba2V5OiBzdHJpbmddOiB7IG51bTogbnVtYmVyLCBzaXplOiBudW1iZXIgfX0gPSB7fTtcclxuICAgICAgICBcclxuICAgICAgICBsZXQgY2hlY2tEaXIgPSAoZGlyUGF0aDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBmaWxlcyA9IHJlYWRkaXJTeW5jKGRpclBhdGgpO1xyXG4gICAgICAgICAgICBmaWxlcy5mb3JFYWNoKChmaWxlTmFtZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHN1YlBhdGggPSBqb2luKGRpclBhdGgsIGZpbGVOYW1lKTtcclxuICAgICAgICAgICAgICAgIGxldCBzdGF0ID0gc3RhdFN5bmMoc3ViUGF0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrRGlyKHN1YlBhdGgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0LmlzRmlsZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGV4dCA9IGV4dG5hbWUoZmlsZU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZXh0KSBleHQgPSBcInVua25vd25cIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0SW5mb1tleHRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dEluZm9bZXh0XS5udW0gKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0SW5mb1tleHRdLnNpemUgKz0gc3RhdC5zaXplO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dEluZm9bZXh0XSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IHN0YXQuc2l6ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY2hlY2tEaXIoam9pbihFZGl0b3IuUHJvamVjdC5wYXRoLCBcImFzc2V0c1wiKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBleHRJbmZvO1xyXG4gICAgfVxyXG5cclxufSJdfQ==