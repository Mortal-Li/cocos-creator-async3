"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const package_json_1 = __importDefault(require("../../package.json"));
const fs_extra_1 = require("fs-extra");
class KKUtils {
    static sleepAsy(t) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve();
            }, t * 1000);
        });
    }
    static getPluginPath() {
        return (0, path_1.join)(Editor.Project.path, "extensions", package_json_1.default.name);
    }
    static url2pathAsy(url) {
        return new Promise((resolve, reject) => {
            Editor.Message.request('asset-db', 'query-path', url)
                .then((str) => {
                resolve(str ? str : "");
            })
                .catch(reject);
        });
    }
    static url2uuidAsy(url) {
        return new Promise((resolve, reject) => {
            Editor.Message.request('asset-db', 'query-uuid', url)
                .then((str) => {
                resolve(str ? str : "");
            })
                .catch(reject);
        });
    }
    /**
     * 如果有嵌套资源，子资源要在后面更新，否则编辑器不显示，需要手动刷新
     */
    static refreshResAsy(url) {
        return Editor.Message.request('asset-db', 'refresh-asset', url);
    }
    static genSceneAsy(url) {
        return KKUtils.genAssetsAsy(url, "db://internal/default_file_content/scene-2d");
    }
    static async genAssetsAsy(targetUrl, templateUrl) {
        let url = await Editor.Message.request('asset-db', 'generate-available-url', targetUrl);
        let templatePath = await KKUtils.url2pathAsy(templateUrl);
        let infoContent = (0, fs_extra_1.readFileSync)(templatePath).toString();
        await Editor.Message.request('asset-db', 'create-asset', url, infoContent, {});
        console.log(`gen ${targetUrl} successfully`);
    }
    static async openSceneAsy(url) {
        let uuid = await KKUtils.url2uuidAsy(url);
        await Editor.Message.request('scene', 'open-scene', uuid);
    }
    static saveSceneAsy() {
        return Editor.Message.request('scene', 'save-scene');
    }
    static genCompAsy(nodeUuid, compName) {
        return Editor.Message.request('scene', 'create-component', {
            uuid: nodeUuid,
            component: compName
        });
    }
    static getSceneRootNodeInfoAsy() {
        return Editor.Message.request('scene', 'query-node-tree');
    }
}
exports.default = KKUtils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS0tVdGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9jb3JlL0tLVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSwrQkFBNEI7QUFDNUIsc0VBQTZDO0FBQzdDLHVDQUF3QztBQUV4QyxNQUFxQixPQUFPO0lBQ3hCLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBUztRQUNyQixPQUFPLElBQUksT0FBTyxDQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3pDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ1osT0FBTyxFQUFFLENBQUM7WUFDZCxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE1BQU0sQ0FBQyxhQUFhO1FBQ2hCLE9BQU8sSUFBQSxXQUFJLEVBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLHNCQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBVztRQUMxQixPQUFPLElBQUksT0FBTyxDQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzNDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsR0FBRyxDQUFDO2lCQUNwRCxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDVixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzVCLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFXO1FBQzFCLE9BQU8sSUFBSSxPQUFPLENBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDM0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFlBQVksRUFBRSxHQUFHLENBQUM7aUJBQ3BELElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUIsQ0FBQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBVztRQUM1QixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBVztRQUMxQixPQUFPLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLDZDQUE2QyxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFNBQWlCLEVBQUUsV0FBbUI7UUFDNUQsSUFBSSxHQUFHLEdBQUcsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsd0JBQXdCLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDeEYsSUFBSSxZQUFZLEdBQUcsTUFBTSxPQUFPLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzFELElBQUksV0FBVyxHQUFHLElBQUEsdUJBQVksRUFBQyxZQUFZLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUV4RCxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxjQUFjLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMvRSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sU0FBUyxlQUFlLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBVztRQUNqQyxJQUFJLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUMsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWTtRQUNmLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQWdCLEVBQUUsUUFBZ0I7UUFDaEQsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUU7WUFDdkQsSUFBSSxFQUFFLFFBQVE7WUFDZCxTQUFTLEVBQUUsUUFBUTtTQUN0QixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTSxDQUFDLHVCQUF1QjtRQUMxQixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQzlELENBQUM7Q0FDSjtBQXhFRCwwQkF3RUMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgcGFja2FnZUpTT04gZnJvbSAnLi4vLi4vcGFja2FnZS5qc29uJztcclxuaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMtZXh0cmEnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgS0tVdGlscyB7XHJcbiAgICBzdGF0aWMgc2xlZXBBc3kodDogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0sIHQgKiAxMDAwKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0UGx1Z2luUGF0aCgpIHtcclxuICAgICAgICByZXR1cm4gam9pbihFZGl0b3IuUHJvamVjdC5wYXRoLCBcImV4dGVuc2lvbnNcIiwgcGFja2FnZUpTT04ubmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHVybDJwYXRoQXN5KHVybDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBFZGl0b3IuTWVzc2FnZS5yZXF1ZXN0KCdhc3NldC1kYicsICdxdWVyeS1wYXRoJywgdXJsKVxyXG4gICAgICAgICAgICAudGhlbigoc3RyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHN0ciA/IHN0ciA6IFwiXCIpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2gocmVqZWN0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdXJsMnV1aWRBc3kodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIEVkaXRvci5NZXNzYWdlLnJlcXVlc3QoJ2Fzc2V0LWRiJywgJ3F1ZXJ5LXV1aWQnLCB1cmwpXHJcbiAgICAgICAgICAgIC50aGVuKChzdHIpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoc3RyID8gc3RyIDogXCJcIik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChyZWplY3QpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5aaC5p6c5pyJ5bWM5aWX6LWE5rqQ77yM5a2Q6LWE5rqQ6KaB5Zyo5ZCO6Z2i5pu05paw77yM5ZCm5YiZ57yW6L6R5Zmo5LiN5pi+56S677yM6ZyA6KaB5omL5Yqo5Yi35pawXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyByZWZyZXNoUmVzQXN5KHVybDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIEVkaXRvci5NZXNzYWdlLnJlcXVlc3QoJ2Fzc2V0LWRiJywgJ3JlZnJlc2gtYXNzZXQnLCB1cmwpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZW5TY2VuZUFzeSh1cmw6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiBLS1V0aWxzLmdlbkFzc2V0c0FzeSh1cmwsIFwiZGI6Ly9pbnRlcm5hbC9kZWZhdWx0X2ZpbGVfY29udGVudC9zY2VuZS0yZFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgZ2VuQXNzZXRzQXN5KHRhcmdldFVybDogc3RyaW5nLCB0ZW1wbGF0ZVVybDogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHVybCA9IGF3YWl0IEVkaXRvci5NZXNzYWdlLnJlcXVlc3QoJ2Fzc2V0LWRiJywgJ2dlbmVyYXRlLWF2YWlsYWJsZS11cmwnLCB0YXJnZXRVcmwpO1xyXG4gICAgICAgIGxldCB0ZW1wbGF0ZVBhdGggPSBhd2FpdCBLS1V0aWxzLnVybDJwYXRoQXN5KHRlbXBsYXRlVXJsKTtcclxuICAgICAgICBsZXQgaW5mb0NvbnRlbnQgPSByZWFkRmlsZVN5bmModGVtcGxhdGVQYXRoKS50b1N0cmluZygpO1xyXG5cclxuICAgICAgICBhd2FpdCBFZGl0b3IuTWVzc2FnZS5yZXF1ZXN0KCdhc3NldC1kYicsICdjcmVhdGUtYXNzZXQnLCB1cmwsIGluZm9Db250ZW50LCB7fSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYGdlbiAke3RhcmdldFVybH0gc3VjY2Vzc2Z1bGx5YCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIG9wZW5TY2VuZUFzeSh1cmw6IHN0cmluZykge1xyXG4gICAgICAgIGxldCB1dWlkID0gYXdhaXQgS0tVdGlscy51cmwydXVpZEFzeSh1cmwpO1xyXG4gICAgICAgIGF3YWl0IEVkaXRvci5NZXNzYWdlLnJlcXVlc3QoJ3NjZW5lJywgJ29wZW4tc2NlbmUnLCB1dWlkKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgc2F2ZVNjZW5lQXN5KCkge1xyXG4gICAgICAgIHJldHVybiBFZGl0b3IuTWVzc2FnZS5yZXF1ZXN0KCdzY2VuZScsICdzYXZlLXNjZW5lJyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdlbkNvbXBBc3kobm9kZVV1aWQ6IHN0cmluZywgY29tcE5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiBFZGl0b3IuTWVzc2FnZS5yZXF1ZXN0KCdzY2VuZScsICdjcmVhdGUtY29tcG9uZW50JywgeyBcclxuICAgICAgICAgICAgdXVpZDogbm9kZVV1aWQsXHJcbiAgICAgICAgICAgIGNvbXBvbmVudDogY29tcE5hbWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0U2NlbmVSb290Tm9kZUluZm9Bc3koKSB7XHJcbiAgICAgICAgcmV0dXJuIEVkaXRvci5NZXNzYWdlLnJlcXVlc3QoJ3NjZW5lJywgJ3F1ZXJ5LW5vZGUtdHJlZScpO1xyXG4gICAgfVxyXG59Il19