"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const package_json_1 = __importDefault(require("../../package.json"));
const fs_extra_1 = require("fs-extra");
class KKUtils {
    static sleepAsy(t) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                resolve();
            }, t * 1000);
        });
    }
    static biggerThanVer(ver) {
        let tgtVers = ver.split('.');
        let curVers = Editor.App.version.split('.');
        for (let i = 0; i < curVers.length; ++i) {
            if (Number(curVers[i]) > Number(tgtVers[i])) {
                return true;
            }
        }
        return false;
    }
    static getPluginPath() {
        return (0, path_1.join)(Editor.Project.path, "extensions", package_json_1.default.name);
    }
    static getConfUrl(pfx) {
        return `db://assets/Boot/Scripts/${pfx}GameUIConf.ts`;
    }
    static removePfxAndSfx(s, pfx, sfx) {
        return s.substring(pfx.length, s.length - sfx.length);
    }
    static url2pathAsy(url) {
        return new Promise((resolve, reject) => {
            Editor.Message.request('asset-db', 'query-path', url)
                .then((str) => {
                resolve(str ? str : "");
            })
                .catch(reject);
        });
    }
    static uuid2pathAsy(uuid) {
        return KKUtils.url2pathAsy(uuid);
    }
    static url2uuidAsy(url) {
        return new Promise((resolve, reject) => {
            Editor.Message.request('asset-db', 'query-uuid', url)
                .then((str) => {
                resolve(str ? str : "");
            })
                .catch(reject);
        });
    }
    /**
     * 如果有嵌套资源，子资源要在后面更新，否则编辑器不显示，需要手动刷新
     */
    static refreshResAsy(urlOrUuid) {
        return Editor.Message.request('asset-db', 'refresh-asset', urlOrUuid);
    }
    static genSceneAsy(url) {
        let astUrl = '';
        if (KKUtils.biggerThanVer("3.8.2"))
            astUrl = 'db://internal/default_file_content/scene/scene-2d.scene';
        else
            astUrl = 'db://internal/default_file_content/scene-2d';
        return KKUtils.genAssetsAsy(url, astUrl);
    }
    static async genAssetsAsy(targetUrl, templateUrl) {
        let url = await Editor.Message.request('asset-db', 'generate-available-url', targetUrl);
        let templatePath = await KKUtils.url2pathAsy(templateUrl);
        let infoContent = (0, fs_extra_1.readFileSync)(templatePath).toString();
        await Editor.Message.request('asset-db', 'create-asset', url, infoContent, {});
        console.log(`gen ${targetUrl} successfully`);
    }
    static async openSceneAsy(url) {
        let uuid = await KKUtils.url2uuidAsy(url);
        await Editor.Message.request('scene', 'open-scene', uuid);
    }
    static saveSceneAsy() {
        return Editor.Message.request('scene', 'save-scene');
    }
    static genCompAsy(nodeUuid, compUuid) {
        return Editor.Message.request('scene', 'create-component', {
            uuid: nodeUuid,
            component: compUuid
        });
    }
    static getSceneRootNodeInfoAsy() {
        return Editor.Message.request('scene', 'query-node-tree');
    }
    static getNodeInfoAsy(nodeUuid) {
        return Editor.Message.request('scene', 'query-node', nodeUuid);
    }
    static getCompInfoAsy(compUuid) {
        return Editor.Message.request('scene', 'query-component', compUuid);
    }
    static setPropertyAsy(scriptNodeUuid, scriptOrder, propName, propType, propUUid) {
        return Editor.Message.request('scene', 'set-property', {
            uuid: scriptNodeUuid,
            path: `__comps__.${scriptOrder}.${propName}`,
            dump: {
                type: propType,
                value: {
                    uuid: propUUid,
                },
            },
        });
    }
    static checkFramework() {
        let _check = (rsv) => {
            Editor.Message.request('scene', 'query-classes', {
                extends: "cc.Component"
            }).then((infos) => {
                let isOK = false;
                for (let l = infos.length - 1; l >= 0; --l) {
                    if (infos[l].name == 'Adapter') {
                        isOK = true;
                        break;
                    }
                }
                if (isOK) {
                    rsv();
                }
                else {
                    setTimeout(() => { _check(rsv); }, 300);
                }
            });
        };
        return new Promise((resolve, reject) => {
            _check(resolve);
        });
    }
}
exports.default = KKUtils;
//# sourceMappingURL=data:application/json;base64,