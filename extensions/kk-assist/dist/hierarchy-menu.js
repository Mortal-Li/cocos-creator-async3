"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onNodeMenu = void 0;
const fs_extra_1 = require("fs-extra");
const KKUtils_1 = __importDefault(require("./core/KKUtils"));
const path_1 = __importDefault(require("path"));
const package_json_1 = __importDefault(require("../package.json"));
function getPropCode(typeName, propName) {
    return `
    @property(${typeName})
    private ${propName}: ${typeName} = null;`;
}
function getInputPropNameAsy(defaultName) {
    return Editor.Message.request(package_json_1.default.name, "get-input-name", defaultName);
}
async function onNodeMenu(info) {
    if (!info)
        return [];
    let nodeInfo = await KKUtils_1.default.getNodeInfoAsy(info.uuid);
    if (!nodeInfo.__prefab__)
        return [];
    let rootNodeUUid = nodeInfo.__prefab__.rootUuid;
    let rootInfo = await KKUtils_1.default.getNodeInfoAsy(rootNodeUUid);
    let scriptName = rootInfo.name.value;
    let scriptOrder = -1;
    let scriptUuid;
    for (let i = 0; i < rootInfo.__comps__.length; ++i) {
        if (rootInfo.__comps__[i].type == scriptName) {
            scriptOrder = i;
            scriptUuid = rootInfo.__comps__[i].cid;
            break;
        }
    }
    if (!scriptUuid) {
        console.log("Cant find root script");
        return [];
    }
    const deUuid = Editor.Utils.UUID.decompressUUID(scriptUuid);
    const scriptPath = await KKUtils_1.default.uuid2pathAsy(deUuid);
    let propName = info.name;
    let compMenus = [];
    let comps = info.components;
    comps.forEach((one, i) => {
        compMenus.push({
            label: one.type,
            async click() {
                propName = await getInputPropNameAsy(propName);
                if (!propName)
                    return;
                let propType = one.type;
                let propTypeName = propType;
                let importType = "";
                if (propType.startsWith("cc.")) {
                    propTypeName = propType.substring(3);
                    importType = propTypeName;
                }
                else if (propType.startsWith("sp.") || propType.startsWith("dragonBones.")) {
                    importType = propType.split('.')[0];
                }
                let tsStr = (0, fs_extra_1.readFileSync)(scriptPath, "utf-8");
                if (tsStr.includes(`private ${propName}: ${propTypeName}`)) {
                    console.warn(`${propName}: ${propTypeName} has bound!`);
                    return;
                }
                let matchRst = tsStr.match(/ extends .*?{/);
                if (!matchRst) {
                    console.log("reg match failed");
                    return;
                }
                let propCode = getPropCode(propTypeName, propName);
                tsStr = tsStr.replace(matchRst[0], matchRst[0] + '\n' + propCode);
                if (importType.length > 0) {
                    matchRst = tsStr.match(/import .*?} from 'cc';/);
                    if (matchRst && !matchRst[0].includes(importType)) {
                        tsStr = tsStr.replace(" } from 'cc'", `, ${importType} } from 'cc'`);
                    }
                }
                else {
                    if (!tsStr.includes(`import { ${propTypeName} }`)) {
                        matchRst = tsStr.match(/const { ccclass, .*?;/);
                        if (matchRst) {
                            let compInfo = await KKUtils_1.default.getCompInfoAsy(one.value);
                            let compPath = await KKUtils_1.default.uuid2pathAsy(Editor.Utils.UUID.decompressUUID(compInfo.cid));
                            let rlPath = path_1.default.relative(path_1.default.dirname(scriptPath), compPath);
                            rlPath = rlPath.replace(/\.\w+$/, '').replace(/\\/g, '/');
                            tsStr = tsStr.replace(matchRst[0], `import { ${propTypeName} } from '${rlPath}';` + '\n' + matchRst[0]);
                        }
                    }
                }
                (0, fs_extra_1.writeFileSync)(scriptPath, tsStr, "utf-8");
                await KKUtils_1.default.refreshResAsy(deUuid);
                await KKUtils_1.default.sleepAsy(0.5);
                await KKUtils_1.default.setPropertyAsy(rootNodeUUid, scriptOrder, propName, propType, one.value);
                console.log(`ÁªëÂÆö ${propName}<=>${propTypeName} ÊàêÂäü`);
            }
        });
    });
    return [
        {
            label: "ü™¢Âø´ÈÄüÁªëÂÆöÂà∞ËÑöÊú¨",
            submenu: [
                {
                    label: "ËäÇÁÇπ",
                    async click() {
                        propName = await getInputPropNameAsy(propName);
                        if (!propName)
                            return;
                        let propCode = getPropCode("Node", propName);
                        let tsStr = (0, fs_extra_1.readFileSync)(scriptPath, "utf-8");
                        let matchRst = tsStr.match(/ extends .*?{/);
                        if (!matchRst) {
                            console.log("reg match failed");
                            return;
                        }
                        tsStr = tsStr.replace(matchRst[0], matchRst[0] + '\n' + propCode);
                        (0, fs_extra_1.writeFileSync)(scriptPath, tsStr, "utf-8");
                        await KKUtils_1.default.refreshResAsy(deUuid);
                        await KKUtils_1.default.sleepAsy(0.5);
                        await KKUtils_1.default.setPropertyAsy(rootNodeUUid, scriptOrder, propName, "cc.Node", info.uuid);
                        console.log(`ÁªëÂÆö ${propName}<=>cc.Node ÊàêÂäü`);
                    }
                },
                {
                    label: "ÁªÑ‰ª∂",
                    submenu: compMenus
                }
            ]
        }
    ];
}
exports.onNodeMenu = onNodeMenu;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGllcmFyY2h5LW1lbnUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zb3VyY2UvaGllcmFyY2h5LW1lbnUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQXVEO0FBQ3ZELDZEQUFxQztBQUNyQyxnREFBd0I7QUFDeEIsbUVBQTBDO0FBRTFDLFNBQVMsV0FBVyxDQUFDLFFBQWdCLEVBQUUsUUFBZ0I7SUFDbkQsT0FBTztnQkFDSyxRQUFRO2NBQ1YsUUFBUSxLQUFLLFFBQVEsVUFBVSxDQUFDO0FBQzlDLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFDLFdBQW1CO0lBQzVDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsc0JBQVcsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDbkYsQ0FBQztBQUVNLEtBQUssVUFBVSxVQUFVLENBQUMsSUFBUztJQUN0QyxJQUFJLENBQUMsSUFBSTtRQUFFLE9BQU8sRUFBRSxDQUFDO0lBRXJCLElBQUksUUFBUSxHQUFHLE1BQU0saUJBQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZELElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVTtRQUFFLE9BQU8sRUFBRSxDQUFDO0lBQ3BDLElBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO0lBQ2hELElBQUksUUFBUSxHQUFHLE1BQU0saUJBQU8sQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDMUQsSUFBSSxVQUFVLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDckMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckIsSUFBSSxVQUFVLENBQUM7SUFDZixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFB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QUFDLEdBQUcsSUFBSSxHQUFHLFFBQVEsQ0FBQyxDQUFDO3dCQUNsRSxJQUFBLHdCQUFhLEVBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQzt3QkFFMUMsTUFBTSxpQkFBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQzt3QkFDcEMsTUFBTSxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDNUIsTUFBTSxpQkFBTyxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUN4RixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sUUFBUSxlQUFlLENBQUMsQ0FBQztvQkFDL0MsQ0FBQztpQkFDSjtnQkFDRDtvQkFDSSxLQUFLLEVBQUUsSUFBSTtvQkFDWCxPQUFPLEVBQUUsU0FBUztpQkFDckI7YUFDSjtTQUNKO0tBQ0osQ0FBQztBQUNOLENBQUM7QUF2SEQsZ0NBdUhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVhZEZpbGVTeW5jLCB3cml0ZUZpbGVTeW5jIH0gZnJvbSBcImZzLWV4dHJhXCI7XHJcbmltcG9ydCBLS1V0aWxzIGZyb20gXCIuL2NvcmUvS0tVdGlsc1wiO1xyXG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgcGFja2FnZUpTT04gZnJvbSAnLi4vcGFja2FnZS5qc29uJztcclxuXHJcbmZ1bmN0aW9uIGdldFByb3BDb2RlKHR5cGVOYW1lOiBzdHJpbmcsIHByb3BOYW1lOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBgXHJcbiAgICBAcHJvcGVydHkoJHt0eXBlTmFtZX0pXHJcbiAgICBwcml2YXRlICR7cHJvcE5hbWV9OiAke3R5cGVOYW1lfSA9IG51bGw7YDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0SW5wdXRQcm9wTmFtZUFzeShkZWZhdWx0TmFtZTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gRWRpdG9yLk1lc3NhZ2UucmVxdWVzdChwYWNrYWdlSlNPTi5uYW1lLCBcImdldC1pbnB1dC1uYW1lXCIsIGRlZmF1bHROYW1lKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9uTm9kZU1lbnUoaW5mbzogYW55KTogUHJvbWlzZTxFZGl0b3IuTWVudS5CYXNlTWVudUl0ZW1bXT4ge1xyXG4gICAgaWYgKCFpbmZvKSByZXR1cm4gW107XHJcbiAgICBcclxuICAgIGxldCBub2RlSW5mbyA9IGF3YWl0IEtLVXRpbHMuZ2V0Tm9kZUluZm9Bc3koaW5mby51dWlkKTtcclxuICAgIGlmICghbm9kZUluZm8uX19wcmVmYWJfXykgcmV0dXJuIFtdO1xyXG4gICAgbGV0IHJvb3ROb2RlVVVpZCA9IG5vZGVJbmZvLl9fcHJlZmFiX18ucm9vdFV1aWQ7XHJcbiAgICBsZXQgcm9vdEluZm8gPSBhd2FpdCBLS1V0aWxzLmdldE5vZGVJbmZvQXN5KHJvb3ROb2RlVVVpZCk7XHJcbiAgICBsZXQgc2NyaXB0TmFtZSA9IHJvb3RJbmZvLm5hbWUudmFsdWU7XHJcbiAgICBsZXQgc2NyaXB0T3JkZXIgPSAtMTtcclxuICAgIGxldCBzY3JpcHRVdWlkO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb290SW5mby5fX2NvbXBzX18ubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBpZiAocm9vdEluZm8uX19jb21wc19fW2ldLnR5cGUgPT0gc2NyaXB0TmFtZSkge1xyXG4gICAgICAgICAgICBzY3JpcHRPcmRlciA9IGk7XHJcbiAgICAgICAgICAgIHNjcmlwdFV1aWQgPSByb290SW5mby5fX2NvbXBzX19baV0uY2lkO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFzY3JpcHRVdWlkKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJDYW50IGZpbmQgcm9vdCBzY3JpcHRcIik7XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGVVdWlkID0gRWRpdG9yLlV0aWxzLlVVSUQuZGVjb21wcmVzc1VVSUQoc2NyaXB0VXVpZCk7XHJcbiAgICBjb25zdCBzY3JpcHRQYXRoID0gYXdhaXQgS0tVdGlscy51dWlkMnBhdGhBc3koZGVVdWlkKTtcclxuXHJcbiAgICBsZXQgcHJvcE5hbWUgPSBpbmZvLm5hbWU7XHJcbiAgICBsZXQgY29tcE1lbnVzOiBFZGl0b3IuTWVudS5CYXNlTWVudUl0ZW1bXSA9IFtdO1xyXG4gICAgbGV0IGNvbXBzID0gaW5mby5jb21wb25lbnRzO1xyXG4gICAgY29tcHMuZm9yRWFjaCgob25lOiBhbnksIGk6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIGNvbXBNZW51cy5wdXNoKHtcclxuICAgICAgICAgICAgbGFiZWw6IG9uZS50eXBlLFxyXG4gICAgICAgICAgICBhc3luYyBjbGljaygpIHtcclxuICAgICAgICAgICAgICAgIHByb3BOYW1lID0gYXdhaXQgZ2V0SW5wdXRQcm9wTmFtZUFzeShwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXByb3BOYW1lKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHByb3BUeXBlID0gb25lLnR5cGUgYXMgc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgbGV0IHByb3BUeXBlTmFtZSA9IHByb3BUeXBlO1xyXG4gICAgICAgICAgICAgICAgbGV0IGltcG9ydFR5cGUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb3BUeXBlLnN0YXJ0c1dpdGgoXCJjYy5cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wVHlwZU5hbWUgPSBwcm9wVHlwZS5zdWJzdHJpbmcoMyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1wb3J0VHlwZSA9IHByb3BUeXBlTmFtZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcFR5cGUuc3RhcnRzV2l0aChcInNwLlwiKSB8fCBwcm9wVHlwZS5zdGFydHNXaXRoKFwiZHJhZ29uQm9uZXMuXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1wb3J0VHlwZSA9IHByb3BUeXBlLnNwbGl0KCcuJylbMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHRzU3RyID0gcmVhZEZpbGVTeW5jKHNjcmlwdFBhdGgsIFwidXRmLThcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodHNTdHIuaW5jbHVkZXMoYHByaXZhdGUgJHtwcm9wTmFtZX06ICR7cHJvcFR5cGVOYW1lfWApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGAke3Byb3BOYW1lfTogJHtwcm9wVHlwZU5hbWV9IGhhcyBib3VuZCFgKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoUnN0ID0gdHNTdHIubWF0Y2goLyBleHRlbmRzIC4qP3svKVxyXG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaFJzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVnIG1hdGNoIGZhaWxlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgcHJvcENvZGUgPSBnZXRQcm9wQ29kZShwcm9wVHlwZU5hbWUsIHByb3BOYW1lKTtcclxuICAgICAgICAgICAgICAgIHRzU3RyID0gdHNTdHIucmVwbGFjZShtYXRjaFJzdFswXSwgbWF0Y2hSc3RbMF0gKyAnXFxuJyArIHByb3BDb2RlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW1wb3J0VHlwZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hSc3QgPSB0c1N0ci5tYXRjaCgvaW1wb3J0IC4qP30gZnJvbSAnY2MnOy8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFJzdCAmJiAhbWF0Y2hSc3RbMF0uaW5jbHVkZXMoaW1wb3J0VHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHNTdHIgPSB0c1N0ci5yZXBsYWNlKFwiIH0gZnJvbSAnY2MnXCIsIGAsICR7aW1wb3J0VHlwZX0gfSBmcm9tICdjYydgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdHNTdHIuaW5jbHVkZXMoYGltcG9ydCB7ICR7cHJvcFR5cGVOYW1lfSB9YCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hSc3QgPSB0c1N0ci5tYXRjaCgvY29uc3QgeyBjY2NsYXNzLCAuKj87Lyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFJzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbXBJbmZvID0gYXdhaXQgS0tVdGlscy5nZXRDb21wSW5mb0FzeShvbmUudmFsdWUpIGFzIGFueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb21wUGF0aCA9IGF3YWl0IEtLVXRpbHMudXVpZDJwYXRoQXN5KEVkaXRvci5VdGlscy5VVUlELmRlY29tcHJlc3NVVUlEKGNvbXBJbmZvLmNpZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJsUGF0aCA9IHBhdGgucmVsYXRpdmUocGF0aC5kaXJuYW1lKHNjcmlwdFBhdGgpLCBjb21wUGF0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBybFBhdGggPSBybFBhdGgucmVwbGFjZSgvXFwuXFx3KyQvLCAnJykucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHNTdHIgPSB0c1N0ci5yZXBsYWNlKG1hdGNoUnN0WzBdLCBgaW1wb3J0IHsgJHtwcm9wVHlwZU5hbWV9IH0gZnJvbSAnJHtybFBhdGh9JztgICsgJ1xcbicgKyBtYXRjaFJzdFswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgd3JpdGVGaWxlU3luYyhzY3JpcHRQYXRoLCB0c1N0ciwgXCJ1dGYtOFwiKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IEtLVXRpbHMucmVmcmVzaFJlc0FzeShkZVV1aWQpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgS0tVdGlscy5zbGVlcEFzeSgwLjUpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgS0tVdGlscy5zZXRQcm9wZXJ0eUFzeShyb290Tm9kZVVVaWQsIHNjcmlwdE9yZGVyLCBwcm9wTmFtZSwgcHJvcFR5cGUsIG9uZS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhg57uR5a6aICR7cHJvcE5hbWV9PD0+JHtwcm9wVHlwZU5hbWV9IOaIkOWKn2ApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGFiZWw6IFwi8J+qouW/q+mAn+e7keWumuWIsOiEmuacrFwiLFxyXG4gICAgICAgICAgICBzdWJtZW51OiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwi6IqC54K5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXN5bmMgY2xpY2soKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BOYW1lID0gYXdhaXQgZ2V0SW5wdXRQcm9wTmFtZUFzeShwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJvcE5hbWUpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcm9wQ29kZSA9IGdldFByb3BDb2RlKFwiTm9kZVwiLCBwcm9wTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0c1N0ciA9IHJlYWRGaWxlU3luYyhzY3JpcHRQYXRoLCBcInV0Zi04XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF0Y2hSc3QgPSB0c1N0ci5tYXRjaCgvIGV4dGVuZHMgLio/ey8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2hSc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVnIG1hdGNoIGZhaWxlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0c1N0ciA9IHRzU3RyLnJlcGxhY2UobWF0Y2hSc3RbMF0sIG1hdGNoUnN0WzBdICsgJ1xcbicgKyBwcm9wQ29kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlRmlsZVN5bmMoc2NyaXB0UGF0aCwgdHNTdHIsIFwidXRmLThcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBLS1V0aWxzLnJlZnJlc2hSZXNBc3koZGVVdWlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgS0tVdGlscy5zbGVlcEFzeSgwLjUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBLS1V0aWxzLnNldFByb3BlcnR5QXN5KHJvb3ROb2RlVVVpZCwgc2NyaXB0T3JkZXIsIHByb3BOYW1lLCBcImNjLk5vZGVcIiwgaW5mby51dWlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYOe7keWumiAke3Byb3BOYW1lfTw9PmNjLk5vZGUg5oiQ5YqfYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCLnu4Tku7ZcIixcclxuICAgICAgICAgICAgICAgICAgICBzdWJtZW51OiBjb21wTWVudXNcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgIF07XHJcbn0iXX0=